//
//  Imageset.h
//  Imageset
//
//  Created by 天格 on 12-8-21.
//
//
#include <stdafx.h>
#include <stdio.h>
#include <string.h>

#include "ImgsetMgr.h"
#include "Imageset.h"
#include "image.c"
#include <math.h>
#include "../ximage/ximage.h"
#include "../particlesystem/hgesprite.h"

//#include "../Timer.h"

#ifndef	 SWAPPOINT
#define SWAPPOINT(x,y) \
	do \
	{\
		GPoint tp = x;\
		x = y;\
		y = tp;\
	} while (false)
#endif

const uint VERTEX_FLOAT_COUNT = 2;
const uint COLOR_FLOAT_COUNT = 4;
const uint GEOMETRY_VERTEX_COUNT = 4;//6;

static short IndexBuffer[] = {0,1,2,2,1,3,4,5,6,6,5,7,8,9,10,10,9,11,12,13,14,14,13,15,16,17,18,18,17,19,20,21,22,22,21,23,24,25,26,26,25,27,28,29,30,30,29,31,32,33,34,34,33,35,36,37,38,38,37,39,40,41,42,42,41,43,44,45,46,46,45,47,48,49,50,50,49,51,52,53,54,54,53,55,56,57,58,58,57,59,60,61,62,62,61,63,64,65,66,66,65,67,68,69,70,70,69,71,72,73,74,74,73,75,76,77,78,78,77,79,80,81,82,82,81,83,84,85,86,86,85,87,88,89,90,90,89,91,92,93,94,94,93,95,96,97,98,98,97,99,100,101,102,102,101,103,104,105,106,106,105,107,108,109,110,110,109,111,112,113,114,114,113,115,116,117,118,118,117,119,120,121,122,122,121,123,124,125,126,126,125,127,128,129,130,130,129,131,132,133,134,134,133,135,136,137,138,138,137,139,140,141,142,142,141,143,144,145,146,146,145,147,148,149,150,150,149,151,152,153,154,154,153,155,156,157,158,158,157,159,160,161,162,162,161,163,164,165,166,166,165,167,168,169,170,170,169,171,172,173,174,174,173,175,176,177,178,178,177,179,180,181,182,182,181,183,184,185,186,186,185,187,188,189,190,190,189,191,192,193,194,194,193,195,196,197,198,198,197,199,200,201,202,202,201,203,204,205,206,206,205,207,208,209,210,210,209,211,212,213,214,214,213,215,216,217,218,218,217,219,220,221,222,222,221,223,224,225,226,226,225,227,228,229,230,230,229,231,232,233,234,234,233,235,236,237,238,238,237,239,240,241,242,242,241,243,244,245,246,246,245,247,248,249,250,250,249,251,252,253,254,254,253,255,256,257,258,258,257,259,260,261,262,262,261,263,264,265,266,266,265,267,268,269,270,270,269,271,272,273,274,274,273,275,276,277,278,278,277,279,280,281,282,282,281,283,284,285,286,286,285,287,288,289,290,290,289,291,292,293,294,294,293,295,296,297,298,298,297,299,300,301,302,302,301,303,304,305,306,306,305,307,308,309,310,310,309,311,312,313,314,314,313,315,316,317,318,318,317,319,320,321,322,322,321,323,324,325,326,326,325,327,328,329,330,330,329,331,332,333,334,334,333,335,336,337,338,338,337,339,340,341,342,342,341,343,344,345,346,346,345,347,348,349,350,350,349,351,352,353,354,354,353,355,356,357,358,358,357,359,360,361,362,362,361,363,364,365,366,366,365,367,368,369,370,370,369,371,372,373,374,374,373,375,376,377,378,378,377,379,380,381,382,382,381,383,384,385,386,386,385,387,388,389,390,390,389,391,392,393,394,394,393,395,396,397,398,398,397,399,400,401,402,402,401,403,404,405,406,406,405,407,408,409,410,410,409,411,412,413,414,414,413,415,416,417,418,418,417,419,420,421,422,422,421,423,424,425,426,426,425,427,428,429,430,430,429,431,432,433,434,434,433,435,436,437,438,438,437,439,440,441,442,442,441,443,444,445,446,446,445,447,448,449,450,450,449,451,452,453,454,454,453,455,456,457,458,458,457,459,460,461,462,462,461,463,464,465,466,466,465,467,468,469,470,470,469,471,472,473,474,474,473,475,476,477,478,478,477,479,480,481,482,482,481,483,484,485,486,486,485,487,488,489,490,490,489,491,492,493,494,494,493,495,496,497,498,498,497,499,500,501,502,502,501,503,504,505,506,506,505,507,508,509,510,510,509,511,512,513,514,514,513,515,516,517,518,518,517,519,520,521,522,522,521,523,524,525,526,526,525,527,528,529,530,530,529,531,532,533,534,534,533,535,536,537,538,538,537,539,540,541,542,542,541,543,544,545,546,546,545,547,548,549,550,550,549,551,552,553,554,554,553,555,556,557,558,558,557,559,560,561,562,562,561,563,564,565,566,566,565,567,568,569,570,570,569,571,572,573,574,574,573,575,576,577,578,578,577,579,580,581,582,582,581,583,584,585,586,586,585,587,588,589,590,590,589,591,592,593,594,594,593,595,596,597,598,598,597,599,600,601,602,602,601,603,604,605,606,606,605,607,608,609,610,610,609,611,612,613,614,614,613,615,616,617,618,618,617,619,620,621,622,622,621,623,624,625,626,626,625,627,628,629,630,630,629,631,632,633,634,634,633,635,636,637,638,638,637,639,640,641,642,642,641,643,644,645,646,646,645,647,648,649,650,650,649,651,652,653,654,654,653,655,656,657,658,658,657,659,660,661,662,662,661,663,664,665,666,666,665,667,668,669,670,670,669,671,672,673,674,674,673,675,676,677,678,678,677,679,680,681,682,682,681,683,684,685,686,686,685,687,688,689,690,690,689,691,692,693,694,694,693,695,696,697,698,698,697,699,700,701,702,702,701,703,704,705,706,706,705,707,708,709,710,710,709,711,712,713,714,714,713,715,716,717,718,718,717,719,720,721,722,722,721,723,724,725,726,726,725,727,728,729,730,730,729,731,732,733,734,734,733,735,736,737,738,738,737,739,740,741,742,742,741,743,744,745,746,746,745,747,748,749,750,750,749,751,752,753,754,754,753,755,756,757,758,758,757,759,760,761,762,762,761,763,764,765,766,766,765,767,768,769,770,770,769,771,772,773,774,774,773,775,776,777,778,778,777,779,780,781,782,782,781,783,784,785,786,786,785,787,788,789,790,790,789,791,792,793,794,794,793,795,796,797,798,798,797,799,800,801,802,802,801,803,804,805,806,806,805,807,808,809,810,810,809,811,812,813,814,814,813,815,816,817,818,818,817,819,820,821,822,822,821,823,824,825,826,826,825,827,828,829,830,830,829,831,832,833,834,834,833,835,836,837,838,838,837,839,840,841,842,842,841,843,844,845,846,846,845,847,848,849,850,850,849,851,852,853,854,854,853,855,856,857,858,858,857,859,860,861,862,862,861,863,864,865,866,866,865,867,868,869,870,870,869,871,872,873,874,874,873,875,876,877,878,878,877,879,880,881,882,882,881,883,884,885,886,886,885,887,888,889,890,890,889,891,892,893,894,894,893,895,896,897,898,898,897,899,900,901,902,902,901,903,904,905,906,906,905,907,908,909,910,910,909,911,912,913,914,914,913,915,916,917,918,918,917,919,920,921,922,922,921,923,924,925,926,926,925,927,928,929,930,930,929,931,932,933,934,934,933,935,936,937,938,938,937,939,940,941,942,942,941,943,944,945,946,946,945,947,948,949,950,950,949,951,952,953,954,954,953,955,956,957,958,958,957,959,960,961,962,962,961,963,964,965,966,966,965,967,968,969,970,970,969,971,972,973,974,974,973,975,976,977,978,978,977,979,980,981,982,982,981,983,984,985,986,986,985,987,988,989,990,990,989,991,992,993,994,994,993,995,996,997,998,998,997,999,1000,1001,1002,1002,1001,1003,1004,1005,1006,1006,1005,1007,1008,1009,1010,1010,1009,1011,1012,1013,1014,1014,1013,1015,1016,1017,1018,1018,1017,1019,1020,1021,1022,1022,1021,1023,1024,1025,1026,1026,1025,1027,1028,1029,1030,1030,1029,1031,1032,1033,1034,1034,1033,1035,1036,1037,1038,1038,1037,1039,1040,1041,1042,1042,1041,1043,1044,1045,1046,1046,1045,1047,1048,1049,1050,1050,1049,1051,1052,1053,1054,1054,1053,1055,1056,1057,1058,1058,1057,1059,1060,1061,1062,1062,1061,1063,1064,1065,1066,1066,1065,1067,1068,1069,1070,1070,1069,1071,1072,1073,1074,1074,1073,1075,1076,1077,1078,1078,1077,1079,1080,1081,1082,1082,1081,1083,1084,1085,1086,1086,1085,1087,1088,1089,1090,1090,1089,1091,1092,1093,1094,1094,1093,1095,1096,1097,1098,1098,1097,1099,1100,1101,1102,1102,1101,1103,1104,1105,1106,1106,1105,1107,1108,1109,1110,1110,1109,1111,1112,1113,1114,1114,1113,1115,1116,1117,1118,1118,1117,1119,1120,1121,1122,1122,1121,1123,1124,1125,1126,1126,1125,1127,1128,1129,1130,1130,1129,1131,1132,1133,1134,1134,1133,1135,1136,1137,1138,1138,1137,1139,1140,1141,1142,1142,1141,1143,1144,1145,1146,1146,1145,1147,1148,1149,1150,1150,1149,1151,1152,1153,1154,1154,1153,1155,1156,1157,1158,1158,1157,1159,1160,1161,1162,1162,1161,1163,1164,1165,1166,1166,1165,1167,1168,1169,1170,1170,1169,1171,1172,1173,1174,1174,1173,1175,1176,1177,1178,1178,1177,1179,1180,1181,1182,1182,1181,1183,1184,1185,1186,1186,1185,1187,1188,1189,1190,1190,1189,1191,1192,1193,1194,1194,1193,1195,1196,1197,1198,1198,1197,1199,1200,1201,1202,1202,1201,1203,1204,1205,1206,1206,1205,1207,1208,1209,1210,1210,1209,1211,1212,1213,1214,1214,1213,1215,1216,1217,1218,1218,1217,1219,1220,1221,1222,1222,1221,1223,1224,1225,1226,1226,1225,1227,1228,1229,1230,1230,1229,1231,1232,1233,1234,1234,1233,1235,1236,1237,1238,1238,1237,1239,1240,1241,1242,1242,1241,1243,1244,1245,1246,1246,1245,1247,1248,1249,1250,1250,1249,1251,1252,1253,1254,1254,1253,1255,1256,1257,1258,1258,1257,1259,1260,1261,1262,1262,1261,1263,1264,1265,1266,1266,1265,1267,1268,1269,1270,1270,1269,1271,1272,1273,1274,1274,1273,1275,1276,1277,1278,1278,1277,1279,1280,1281,1282,1282,1281,1283,1284,1285,1286,1286,1285,1287,1288,1289,1290,1290,1289,1291,1292,1293,1294,1294,1293,1295,1296,1297,1298,1298,1297,1299,1300,1301,1302,1302,1301,1303,1304,1305,1306,1306,1305,1307,1308,1309,1310,1310,1309,1311,1312,1313,1314,1314,1313,1315,1316,1317,1318,1318,1317,1319,1320,1321,1322,1322,1321,1323,1324,1325,1326,1326,1325,1327,1328,1329,1330,1330,1329,1331,1332,1333
,1334,1334,1333,1335,1336,1337,1338,1338,1337,1339,1340,1341,1342,1342,1341,1343,1344,1345,1346,1346,1345,1347,1348,1349,1350,1350,1349,1351,1352,1353,1354,1354,1353,1355,1356,1357,1358,1358,1357,1359,1360,1361,1362,1362,1361,1363,1364,1365,1366,1366,1365,1367,1368,1369,1370,1370,1369,1371,1372,1373,1374,1374,1373,1375,1376,1377,1378,1378,1377,1379,1380,1381,1382,1382,1381,1383,1384,1385,1386,1386,1385,1387,1388,1389,1390,1390,1389,1391,1392,1393,1394,1394,1393,1395,1396,1397,1398,1398,1397,1399,1400,1401,1402,1402,1401,1403,1404,1405,1406,1406,1405,1407,1408,1409,1410,1410,1409,1411,1412,1413,1414,1414,1413,1415,1416,1417,1418,1418,1417,1419,1420,1421,1422,1422,1421,1423,1424,1425,1426,1426,1425,1427,1428,1429,1430,1430,1429,1431,1432,1433,1434,1434,1433,1435,1436,1437,1438,1438,1437,1439,1440,1441,1442,1442,1441,1443,1444,1445,1446,1446,1445,1447,1448,1449,1450,1450,1449,1451,1452,1453,1454,1454,1453,1455,1456,1457,1458,1458,1457,1459,1460,1461,1462,1462,1461,1463,1464,1465,1466,1466,1465,1467,1468,1469,1470,1470,1469,1471,1472,1473,1474,1474,1473,1475,1476,1477,1478,1478,1477,1479,1480,1481,1482,1482,1481,1483,1484,1485,1486,1486,1485,1487,1488,1489,1490,1490,1489,1491,1492,1493,1494,1494,1493,1495,1496,1497,1498,1498,1497,1499,1500,1501,1502,1502,1501,1503,1504,1505,1506,1506,1505,1507,1508,1509,1510,1510,1509,1511,1512,1513,1514,1514,1513,1515,1516,1517,1518,1518,1517,1519,1520,1521,1522,1522,1521,1523,1524,1525,1526,1526,1525,1527,1528,1529,1530,1530,1529,1531,1532,1533,1534,1534,1533,1535,1536,1537,1538,1538,1537,1539,1540,1541,1542,1542,1541,1543,1544,1545,1546,1546,1545,1547,1548,1549,1550,1550,1549,1551,1552,1553,1554,1554,1553,1555,1556,1557,1558,1558,1557,1559,1560,1561,1562,1562,1561,1563,1564,1565,1566,1566,1565,1567,1568,1569,1570,1570,1569,1571,1572,1573,1574,1574,1573,1575,1576,1577,1578,1578,1577,1579,1580,1581,1582,1582,1581,1583,1584,1585,1586,1586,1585,1587,1588,1589,1590,1590,1589,1591,1592,1593,1594,1594,1593,1595,1596,1597,1598,1598,1597,1599,1600,1601,1602,1602,1601,1603,1604,1605,1606,1606,1605,1607,1608,1609,1610,1610,1609,1611,1612,1613,1614,1614,1613,1615,1616,1617,1618,1618,1617,1619,1620,1621,1622,1622,1621,1623,1624,1625,1626,1626,1625,1627,1628,1629,1630,1630,1629,1631,1632,1633,1634,1634,1633,1635,1636,1637,1638,1638,1637,1639,1640,1641,1642,1642,1641,1643,1644,1645,1646,1646,1645,1647,1648,1649,1650,1650,1649,1651,1652,1653,1654,1654,1653,1655,1656,1657,1658,1658,1657,1659,1660,1661,1662,1662,1661,1663,1664,1665,1666,1666,1665,1667,1668,1669,1670,1670,1669,1671,1672,1673,1674,1674,1673,1675,1676,1677,1678,1678,1677,1679,1680,1681,1682,1682,1681,1683,1684,1685,1686,1686,1685,1687,1688,1689,1690,1690,1689,1691,1692,1693,1694,1694,1693,1695,1696,1697,1698,1698,1697,1699,1700,1701,1702,1702,1701,1703,1704,1705,1706,1706,1705,1707,1708,1709,1710,1710,1709,1711,1712,1713,1714,1714,1713,1715,1716,1717,1718,1718,1717,1719,1720,1721,1722,1722,1721,1723,1724,1725,1726,1726,1725,1727,1728,1729,1730,1730,1729,1731,1732,1733,1734,1734,1733,1735,1736,1737,1738,1738,1737,1739,1740,1741,1742,1742,1741,1743,1744,1745,1746,1746,1745,1747,1748,1749,1750,1750,1749,1751,1752,1753,1754,1754,1753,1755,1756,1757,1758,1758,1757,1759,1760,1761,1762,1762,1761,1763,1764,1765,1766,1766,1765,1767,1768,1769,1770,1770,1769,1771,1772,1773,1774,1774,1773,1775,1776,1777,1778,1778,1777,1779,1780,1781,1782,1782,1781,1783,1784,1785,1786,1786,1785,1787,1788,1789,1790,1790,1789,1791,1792,1793,1794,1794,1793,1795,1796,1797,1798,1798,1797,1799,1800,1801,1802,1802,1801,1803,1804,1805,1806,1806,1805,1807,1808,1809,1810,1810,1809,1811,1812,1813,1814,1814,1813,1815,1816,1817,1818,1818,1817,1819,1820,1821,1822,1822,1821,1823,1824,1825,1826,1826,1825,1827,1828,1829,1830,1830,1829,1831,1832,1833,1834,1834,1833,1835,1836,1837,1838,1838,1837,1839,1840,1841,1842,1842,1841,1843,1844,1845,1846,1846,1845,1847,1848,1849,1850,1850,1849,1851,1852,1853,1854,1854,1853,1855,1856,1857,1858,1858,1857,1859,1860,1861,1862,1862,1861,1863,1864,1865,1866,1866,1865,1867,1868,1869,1870,1870,1869,1871,1872,1873,1874,1874,1873,1875,1876,1877,1878,1878,1877,1879,1880,1881,1882,1882,1881,1883,1884,1885,1886,1886,1885,1887,1888,1889,1890,1890,1889,1891,1892,1893,1894,1894,1893,1895,1896,1897,1898,1898,1897,1899,1900,1901,1902,1902,1901,1903,1904,1905,1906,1906,1905,1907,1908,1909,1910,1910,1909,1911,1912,1913,1914,1914,1913,1915,1916,1917,1918,1918,1917,1919,1920,1921,1922,1922,1921,1923,1924,1925,1926,1926,1925,1927,1928,1929,1930,1930,1929,1931,1932,1933,1934,1934,1933,1935,1936,1937,1938,1938,1937,1939,1940,1941,1942,1942,1941,1943,1944,1945,1946,1946,1945,1947,1948,1949,1950,1950,1949,1951,1952,1953,1954,1954,1953,1955,1956,1957,1958,1958,1957,1959,1960,1961,1962,1962,1961,1963,1964,1965,1966,1966,1965,1967,1968,1969,1970,1970,1969,1971,1972,1973,1974,1974,1973,1975,1976,1977,1978,1978,1977,1979,1980,1981,1982,1982,1981,1983,1984,1985,1986,1986,1985,1987,1988,1989,1990,1990,1989,1991,1992,1993,1994,1994,1993,1995,1996,1997,1998,1998,1997,1999,2000,2001,2002,2002,2001,2003,2004,2005,2006,2006,2005,2007,2008,2009,2010,2010,2009,2011,2012,2013,2014,2014,2013,2015,2016,2017,2018,2018,2017,2019,2020,2021,2022,2022,2021,2023,2024,2025,2026,2026,2025,2027,2028,2029,2030,2030,2029,2031,2032,2033,2034,2034,2033,2035,2036,2037,2038,2038,2037,2039,2040,2041,2042,2042,2041,2043,2044,2045,2046,2046,2045,2047,2048,2049,2050,2050,2049,2051,2052,2053,2054,2054,2053,2055,2056,2057,2058,2058,2057,2059,2060,2061,2062,2062,2061,2063,2064,2065,2066,2066,2065,2067,2068,2069,2070,2070,2069,2071,2072,2073,2074,2074,2073,2075,2076,2077,2078,2078,2077,2079,2080,2081,2082,2082,2081,2083,2084,2085,2086,2086,2085,2087,2088,2089,2090,2090,2089,2091,2092,2093,2094,2094,2093,2095,2096,2097,2098,2098,2097,2099,2100,2101,2102,2102,2101,2103,2104,2105,2106,2106,2105,2107,2108,2109,2110,2110,2109,2111,2112,2113,2114,2114,2113,2115,2116,2117,2118,2118,2117,2119,2120,2121,2122,2122,2121,2123,2124,2125,2126,2126,2125,2127,2128,2129,2130,2130,2129,2131,2132,2133,2134,2134,2133,2135,2136,2137,2138,2138,2137,2139,2140,2141,2142,2142,2141,2143,2144,2145,2146,2146,2145,2147,2148,2149,2150,2150,2149,2151,2152,2153,2154,2154,2153,2155,2156,2157,2158,2158,2157,2159,2160,2161,2162,2162,2161,2163,2164,2165,2166,2166,2165,2167,2168,2169,2170,2170,2169,2171,2172,2173,2174,2174,2173,2175,2176,2177,2178,2178,2177,2179,2180,2181,2182,2182,2181,2183,2184,2185,2186,2186,2185,2187,2188,2189,2190,2190,2189,2191,2192,2193,2194,2194,2193,2195,2196,2197,2198,2198,2197,2199,2200,2201,2202,2202,2201,2203,2204,2205,2206,2206,2205,2207,2208,2209,2210,2210,2209,2211,2212,2213,2214,2214,2213,2215,2216,2217,2218,2218,2217,2219,2220,2221,2222,2222,2221,2223,2224,2225,2226,2226,2225,2227,2228,2229,2230,2230,2229,2231,2232,2233,2234,2234,2233,2235,2236,2237,2238,2238,2237,2239,2240,2241,2242,2242,2241,2243,2244,2245,2246,2246,2245,2247,2248,2249,2250,2250,2249,2251,2252,2253,2254,2254,2253,2255,2256,2257,2258,2258,2257,2259,2260,2261,2262,2262,2261,2263,2264,2265,2266,2266,2265,2267,2268,2269,2270,2270,2269,2271,2272,2273,2274,2274,2273,2275,2276,2277,2278,2278,2277,2279,2280,2281,2282,2282,2281,2283,2284,2285,2286,2286,2285,2287,2288,2289,2290,2290,2289,2291,2292,2293,2294,2294,2293,2295,2296,2297,2298,2298,2297,2299,2300,2301,2302,2302,2301,2303,2304,2305,2306,2306,2305,2307,2308,2309,2310,2310,2309,2311,2312,2313,2314,2314,2313,2315,2316,2317,2318,2318,2317,2319,2320,2321,2322,2322,2321,2323,2324,2325,2326,2326,2325,2327,2328,2329,2330,2330,2329,2331,2332,2333,2334,2334,2333,2335,2336,2337,2338,2338,2337,2339,2340,2341,2342,2342,2341,2343,2344,2345,2346,2346,2345,2347,2348,2349,2350,2350,2349,2351,2352,2353,2354,2354,2353,2355,2356,2357,2358,2358,2357,2359,2360,2361,2362,2362,2361,2363,2364,2365,2366,2366,2365,2367,2368,2369,2370,2370,2369,2371,2372,2373,2374,2374,2373,2375,2376,2377,2378,2378,2377,2379,2380,2381,2382,2382,2381,2383,2384,2385,2386,2386,2385,2387,2388,2389,2390,2390,2389,2391,2392,2393,2394,2394,2393,2395,2396,2397,2398,2398,2397,2399,2400,2401,2402,2402,2401,2403,2404,2405,2406,2406,2405,2407,2408,2409,2410,2410,2409,2411,2412,2413,2414,2414,2413,2415,2416,2417,2418,2418,2417,2419,2420,2421,2422,2422,2421,2423,2424,2425,2426,2426,2425,2427,2428,2429,2430,2430,2429,2431,2432,2433,2434,2434,2433,2435,2436,2437,2438,2438,2437,2439,2440,2441,2442,2442,2441,2443,2444,2445,2446,2446,2445,2447,2448,2449,2450,2450,2449,2451,2452,2453,2454,2454,2453,2455,2456,2457,2458,2458,2457,2459,2460,2461,2462,2462,2461,2463,2464,2465,2466,2466,2465,2467,2468,2469,2470,2470,2469,2471,2472,2473,2474,2474,2473,2475,2476,2477,2478,2478,2477,2479,2480,2481,2482,2482,2481,2483,2484,2485,2486,2486,2485,2487,2488,2489,2490,2490,2489,2491,2492,2493,2494,2494,2493,2495,2496,2497,2498,2498,2497,2499,2500,2501,2502,2502,2501,2503,2504,2505,2506,2506,2505,2507,2508,2509,2510,2510,2509,2511,2512,2513,2514,2514,2513,2515,2516,2517,2518,2518,2517,2519,2520,2521,2522,2522,2521,2523,2524,2525,2526,2526,2525,2527,2528,2529,2530,2530,2529,2531,2532,2533,2534,2534,2533,2535,2536,2537,2538,2538,2537,2539,2540,2541,2542,2542,2541,2543,2544,2545,2546,2546,2545,2547,2548
,2549,2550,2550,2549,2551,2552,2553,2554,2554,2553,2555,2556,2557,2558,2558,2557,2559,2560,2561,2562,2562,2561,2563,2564,2565,2566,2566,2565,2567,2568,2569,2570,2570,2569,2571,2572,2573,2574,2574,2573,2575,2576,2577,2578,2578,2577,2579,2580,2581,2582,2582,2581,2583,2584,2585,2586,2586,2585,2587,2588,2589,2590,2590,2589,2591,2592,2593,2594,2594,2593,2595,2596,2597,2598,2598,2597,2599,2600,2601,2602,2602,2601,2603,2604,2605,2606,2606,2605,2607,2608,2609,2610,2610,2609,2611,2612,2613,2614,2614,2613,2615,2616,2617,2618,2618,2617,2619,2620,2621,2622,2622,2621,2623,2624,2625,2626,2626,2625,2627,2628,2629,2630,2630,2629,2631,2632,2633,2634,2634,2633,2635,2636,2637,2638,2638,2637,2639,2640,2641,2642,2642,2641,2643,2644,2645,2646,2646,2645,2647,2648,2649,2650,2650,2649,2651,2652,2653,2654,2654,2653,2655,2656,2657,2658,2658,2657,2659,2660,2661,2662,2662,2661,2663,2664,2665,2666,2666,2665,2667,2668,2669,2670,2670,2669,2671,2672,2673,2674,2674,2673,2675,2676,2677,2678,2678,2677,2679,2680,2681,2682,2682,2681,2683,2684,2685,2686,2686,2685,2687,2688,2689,2690,2690,2689,2691,2692,2693,2694,2694,2693,2695,2696,2697,2698,2698,2697,2699,2700,2701,2702,2702,2701,2703,2704,2705,2706,2706,2705,2707,2708,2709,2710,2710,2709,2711,2712,2713,2714,2714,2713,2715,2716,2717,2718,2718,2717,2719,2720,2721,2722,2722,2721,2723,2724,2725,2726,2726,2725,2727,2728,2729,2730,2730,2729,2731,2732,2733,2734,2734,2733,2735,2736,2737,2738,2738,2737,2739,2740,2741,2742,2742,2741,2743,2744,2745,2746,2746,2745,2747,2748,2749,2750,2750,2749,2751,2752,2753,2754,2754,2753,2755,2756,2757,2758,2758,2757,2759,2760,2761,2762,2762,2761,2763,2764,2765,2766,2766,2765,2767,2768,2769,2770,2770,2769,2771,2772,2773,2774,2774,2773,2775,2776,2777,2778,2778,2777,2779,2780,2781,2782,2782,2781,2783,2784,2785,2786,2786,2785,2787,2788,2789,2790,2790,2789,2791,2792,2793,2794,2794,2793,2795,2796,2797,2798,2798,2797,2799,2800,2801,2802,2802,2801,2803,2804,2805,2806,2806,2805,2807,2808,2809,2810,2810,2809,2811,2812,2813,2814,2814,2813,2815,2816,2817,2818,2818,2817,2819,2820,2821,2822,2822,2821,2823,2824,2825,2826,2826,2825,2827,2828,2829,2830,2830,2829,2831,2832,2833,2834,2834,2833,2835,2836,2837,2838,2838,2837,2839,2840,2841,2842,2842,2841,2843,2844,2845,2846,2846,2845,2847,2848,2849,2850,2850,2849,2851,2852,2853,2854,2854,2853,2855,2856,2857,2858,2858,2857,2859,2860,2861,2862,2862,2861,2863,2864,2865,2866,2866,2865,2867,2868,2869,2870,2870,2869,2871,2872,2873,2874,2874,2873,2875,2876,2877,2878,2878,2877,2879,2880,2881,2882,2882,2881,2883,2884,2885,2886,2886,2885,2887,2888,2889,2890,2890,2889,2891,2892,2893,2894,2894,2893,2895,2896,2897,2898,2898,2897,2899,2900,2901,2902,2902,2901,2903,2904,2905,2906,2906,2905,2907,2908,2909,2910,2910,2909,2911,2912,2913,2914,2914,2913,2915,2916,2917,2918,2918,2917,2919,2920,2921,2922,2922,2921,2923,2924,2925,2926,2926,2925,2927,2928,2929,2930,2930,2929,2931,2932,2933,2934,2934,2933,2935,2936,2937,2938,2938,2937,2939,2940,2941,2942,2942,2941,2943,2944,2945,2946,2946,2945,2947,2948,2949,2950,2950,2949,2951,2952,2953,2954,2954,2953,2955,2956,2957,2958,2958,2957,2959,2960,2961,2962,2962,2961,2963,2964,2965,2966,2966,2965,2967,2968,2969,2970,2970,2969,2971,2972,2973,2974,2974,2973,2975,2976,2977,2978,2978,2977,2979,2980,2981,2982,2982,2981,2983,2984,2985,2986,2986,2985,2987,2988,2989,2990,2990,2989,2991,2992,2993,2994,2994,2993,2995,2996,2997,2998,2998,2997,2999,3000,3001,3002,3002,3001,3003,3004,3005,3006,3006,3005,3007,3008,3009,3010,3010,3009,3011,3012,3013,3014,3014,3013,3015,3016,3017,3018,3018,3017,3019,3020,3021,3022,3022,3021,3023,3024,3025,3026,3026,3025,3027,3028,3029,3030,3030,3029,3031,3032,3033,3034,3034,3033,3035,3036,3037,3038,3038,3037,3039,3040,3041,3042,3042,3041,3043,3044,3045,3046,3046,3045,3047,3048,3049,3050,3050,3049,3051,3052,3053,3054,3054,3053,3055,3056,3057,3058,3058,3057,3059,3060,3061,3062,3062,3061,3063,3064,3065,3066,3066,3065,3067,3068,3069,3070,3070,3069,3071,3072,3073,3074,3074,3073,3075,3076,3077,3078,3078,3077,3079,3080,3081,3082,3082,3081,3083,3084,3085,3086,3086,3085,3087,3088,3089,3090,3090,3089,3091,3092,3093,3094,3094,3093,3095,3096,3097,3098,3098,3097,3099,3100,3101,3102,3102,3101,3103,3104,3105,3106,3106,3105,3107,3108,3109,3110,3110,3109,3111,3112,3113,3114,3114,3113,3115,3116,3117,3118,3118,3117,3119,3120,3121,3122,3122,3121,3123,3124,3125,3126,3126,3125,3127,3128,3129,3130,3130,3129,3131,3132,3133,3134,3134,3133,3135,3136,3137,3138,3138,3137,3139,3140,3141,3142,3142,3141,3143,3144,3145,3146,3146,3145,3147,3148,3149,3150,3150,3149,3151,3152,3153,3154,3154,3153,3155,3156,3157,3158,3158,3157,3159,3160,3161,3162,3162,3161,3163,3164,3165,3166,3166,3165,3167,3168,3169,3170,3170,3169,3171,3172,3173,3174,3174,3173,3175,3176,3177,3178,3178,3177,3179,3180,3181,3182,3182,3181,3183,3184,3185,3186,3186,3185,3187,3188,3189,3190,3190,3189,3191,3192,3193,3194,3194,3193,3195,3196,3197,3198,3198,3197,3199,3200,3201,3202,3202,3201,3203,3204,3205,3206,3206,3205,3207,3208,3209,3210,3210,3209,3211,3212,3213,3214,3214,3213,3215,3216,3217,3218,3218,3217,3219,3220,3221,3222,3222,3221,3223,3224,3225,3226,3226,3225,3227,3228,3229,3230,3230,3229,3231,3232,3233,3234,3234,3233,3235,3236,3237,3238,3238,3237,3239,3240,3241,3242,3242,3241,3243,3244,3245,3246,3246,3245,3247,3248,3249,3250,3250,3249,3251,3252,3253,3254,3254,3253,3255,3256,3257,3258,3258,3257,3259,3260,3261,3262,3262,3261,3263,3264,3265,3266,3266,3265,3267,3268,3269,3270,3270,3269,3271,3272,3273,3274,3274,3273,3275,3276,3277,3278,3278,3277,3279,3280,3281,3282,3282,3281,3283,3284,3285,3286,3286,3285,3287,3288,3289,3290,3290,3289,3291,3292,3293,3294,3294,3293,3295,3296,3297,3298,3298,3297,3299,3300,3301,3302,3302,3301,3303,3304,3305,3306,3306,3305,3307,3308,3309,3310,3310,3309,3311,3312,3313,3314,3314,3313,3315,3316,3317,3318,3318,3317,3319,3320,3321,3322,3322,3321,3323,3324,3325,3326,3326,3325,3327,3328,3329,3330,3330,3329,3331,3332,3333,3334,3334,3333,3335,3336,3337,3338,3338,3337,3339,3340,3341,3342,3342,3341,3343,3344,3345,3346,3346,3345,3347,3348,3349,3350,3350,3349,3351,3352,3353,3354,3354,3353,3355,3356,3357,3358,3358,3357,3359,3360,3361,3362,3362,3361,3363,3364,3365,3366,3366,3365,3367,3368,3369,3370,3370,3369,3371,3372,3373,3374,3374,3373,3375,3376,3377,3378,3378,3377,3379,3380,3381,3382,3382,3381,3383,3384,3385,3386,3386,3385,3387,3388,3389,3390,3390,3389,3391,3392,3393,3394,3394,3393,3395,3396,3397,3398,3398,3397,3399,3400,3401,3402,3402,3401,3403,3404,3405,3406,3406,3405,3407,3408,3409,3410,3410,3409,3411,3412,3413,3414,3414,3413,3415,3416,3417,3418,3418,3417,3419,3420,3421,3422,3422,3421,3423,3424,3425,3426,3426,3425,3427,3428,3429,3430,3430,3429,3431,3432,3433,3434,3434,3433,3435,3436,3437,3438,3438,3437,3439,3440,3441,3442,3442,3441,3443,3444,3445,3446,3446,3445,3447,3448,3449,3450,3450,3449,3451,3452,3453,3454,3454,3453,3455,3456,3457,3458,3458,3457,3459,3460,3461,3462,3462,3461,3463,3464,3465,3466,3466,3465,3467,3468,3469,3470,3470,3469,3471,3472,3473,3474,3474,3473,3475,3476,3477,3478,3478,3477,3479,3480,3481,3482,3482,3481,3483,3484,3485,3486,3486,3485,3487,3488,3489,3490,3490,3489,3491,3492,3493,3494,3494,3493,3495,3496,3497,3498,3498,3497,3499,3500,3501,3502,3502,3501,3503,3504,3505,3506,3506,3505,3507,3508,3509,3510,3510,3509,3511,3512,3513,3514,3514,3513,3515,3516,3517,3518,3518,3517,3519,3520,3521,3522,3522,3521,3523,3524,3525,3526,3526,3525,3527,3528,3529,3530,3530,3529,3531,3532,3533,3534,3534,3533,3535,3536,3537,3538,3538,3537,3539,3540,3541,3542,3542,3541,3543,3544,3545,3546,3546,3545,3547,3548,3549,3550,3550,3549,3551,3552,3553,3554,3554,3553,3555,3556,3557,3558,3558,3557,3559,3560,3561,3562,3562,3561,3563,3564,3565,3566,3566,3565,3567,3568,3569,3570,3570,3569,3571,3572,3573,3574,3574,3573,3575,3576,3577,3578,3578,3577,3579,3580,3581,3582,3582,3581,3583,3584,3585,3586,3586,3585,3587,3588,3589,3590,3590,3589,3591,3592,3593,3594,3594,3593,3595,3596,3597,3598,3598,3597,3599,3600,3601,3602,3602,3601,3603,3604,3605,3606,3606,3605,3607,3608,3609,3610,3610,3609,3611,3612,3613,3614,3614,3613,3615,3616,3617,3618,3618,3617,3619,3620,3621,3622,3622,3621,3623,3624,3625,3626,3626,3625
,3627,3628,3629,3630,3630,3629,3631,3632,3633,3634,3634,3633,3635,3636,3637,3638,3638,3637,3639,3640,3641,3642,3642,3641,3643,3644,3645,3646,3646,3645,3647,3648,3649,3650,3650,3649,3651,3652,3653,3654,3654,3653,3655,3656,3657,3658,3658,3657,3659,3660,3661,3662,3662,3661,3663,3664,3665,3666,3666,3665,3667,3668,3669,3670,3670,3669,3671,3672,3673,3674,3674,3673,3675,3676,3677,3678,3678,3677,3679,3680,3681,3682,3682,3681,3683,3684,3685,3686,3686,3685,3687,3688,3689,3690,3690,3689,3691,3692,3693,3694,3694,3693,3695,3696,3697,3698,3698,3697,3699,3700,3701,3702,3702,3701,3703,3704,3705,3706,3706,3705,3707,3708,3709,3710,3710,3709,3711,3712,3713,3714,3714,3713,3715,3716,3717,3718,3718,3717,3719,3720,3721,3722,3722,3721,3723,3724,3725,3726,3726,3725,3727,3728,3729,3730,3730,3729,3731,3732,3733,3734,3734,3733,3735,3736,3737,3738,3738,3737,3739,3740,3741,3742,3742,3741,3743,3744,3745,3746,3746,3745,3747,3748,3749,3750,3750,3749,3751,3752,3753,3754,3754,3753,3755,3756,3757,3758,3758,3757,3759,3760,3761,3762,3762,3761,3763,3764,3765,3766,3766,3765,3767,3768,3769,3770,3770,3769,3771,3772,3773,3774,3774,3773,3775,3776,3777,3778,3778,3777,3779,3780,3781,3782,3782,3781,3783,3784,3785,3786,3786,3785,3787,3788,3789,3790,3790,3789,3791,3792,3793,3794,3794,3793,3795,3796,3797,3798,3798,3797,3799,3800,3801,3802,3802,3801,3803,3804,3805,3806,3806,3805,3807,3808,3809,3810,3810,3809,3811,3812,3813,3814,3814,3813,3815,3816,3817,3818,3818,3817,3819,3820,3821,3822,3822,3821,3823,3824,3825,3826,3826,3825,3827,3828,3829,3830,3830,3829,3831,3832,3833,3834,3834,3833,3835,3836,3837,3838,3838,3837,3839,3840,3841,3842,3842,3841,3843,3844,3845,3846,3846,3845,3847,3848,3849,3850,3850,3849,3851,3852,3853,3854,3854,3853,3855,3856,3857,3858,3858,3857,3859,3860,3861,3862,3862,3861,3863,3864,3865,3866,3866,3865,3867,3868,3869,3870,3870,3869,3871,3872,3873,3874,3874,3873,3875,3876,3877,3878,3878,3877,3879,3880,3881,3882,3882,3881,3883,3884,3885,3886,3886,3885,3887,3888,3889,3890,3890,3889,3891,3892,3893,3894,3894,3893,3895,3896,3897,3898,3898,3897,3899,3900,3901,3902,3902,3901,3903,3904,3905,3906,3906,3905,3907,3908,3909,3910,3910,3909,3911,3912,3913,3914,3914,3913,3915,3916,3917,3918,3918,3917,3919,3920,3921,3922,3922,3921,3923,3924,3925,3926,3926,3925,3927,3928,3929,3930,3930,3929,3931,3932,3933,3934,3934,3933,3935,3936,3937,3938,3938,3937,3939,3940,3941,3942,3942,3941,3943,3944,3945,3946,3946,3945,3947,3948,3949,3950,3950,3949,3951,3952,3953,3954,3954,3953,3955,3956,3957,3958,3958,3957,3959,3960,3961,3962,3962,3961,3963,3964,3965,3966,3966,3965,3967,3968,3969,3970,3970,3969,3971,3972,3973,3974,3974,3973,3975,3976,3977,3978,3978,3977,3979,3980,3981,3982,3982,3981,3983,3984,3985,3986,3986,3985,3987,3988,3989,3990,3990,3989,3991,3992,3993,3994,3994,3993,3995,3996,3997,3998,3998,3997,3999,4000,4001,4002,4002,4001,4003,4004,4005,4006,4006,4005,4007,4008,4009,4010,4010,4009,4011,4012,4013,4014,4014,4013,4015,4016,4017,4018,4018,4017,4019,4020,4021,4022,4022,4021,4023,4024,4025,4026,4026,4025,4027,4028,4029,4030,4030,4029,4031,4032,4033,4034,4034,4033,4035,4036,4037,4038,4038,4037,4039,4040,4041,4042,4042,4041,4043,4044,4045,4046,4046,4045,4047,4048,4049,4050,4050,4049,4051,4052,4053,4054,4054,4053,4055,4056,4057,4058,4058,4057,4059,4060,4061,4062,4062,4061,4063,4064,4065,4066,4066,4065,4067,4068,4069,4070,4070,4069,4071,4072,4073,4074,4074,4073,4075,4076,4077,4078,4078,4077,4079,4080,4081,4082,4082,4081,4083,4084,4085,4086,4086,4085,4087,4088,4089,4090,4090,4089,4091,4092,4093,4094,4094,4093,4095,4096,4097,4098,4098,4097,4099,4100,4101,4102,4102,4101,4103,4104,4105,4106,4106,4105,4107,4108,4109,4110,4110,4109,4111,4112,4113,4114,4114,4113,4115,4116,4117,4118,4118,4117,4119,4120,4121,4122,4122,4121,4123,4124,4125,4126,4126,4125,4127,4128,4129,4130,4130,4129,4131,4132,4133,4134,4134,4133,4135,4136,4137,4138,4138,4137,4139,4140,4141,4142,4142,4141,4143,4144,4145,4146,4146,4145,4147,4148,4149,4150,4150,4149,4151,4152,4153,4154,4154,4153,4155,4156,4157,4158,4158,4157,4159,4160,4161,4162,4162,4161,4163,4164,4165,4166,4166,4165,4167,4168,4169,4170,4170,4169,4171,4172,4173,4174,4174,4173,4175,4176,4177,4178,4178,4177,4179,4180,4181,4182,4182,4181,4183,4184,4185,4186,4186,4185,4187,4188,4189,4190,4190,4189,4191,4192,4193,4194,4194,4193,4195,4196,4197,4198,4198,4197,4199,4200,4201,4202,4202,4201,4203,4204,4205,4206,4206,4205,4207,4208,4209,4210,4210,4209,4211,4212,4213,4214,4214,4213,4215,4216,4217,4218,4218,4217,4219,4220,4221,4222,4222,4221,4223,4224,4225,4226,4226,4225,4227,4228,4229,4230,4230,4229,4231,4232,4233,4234,4234,4233,4235,4236,4237,4238,4238,4237,4239,4240,4241,4242,4242,4241,4243,4244,4245,4246,4246,4245,4247,4248,4249,4250,4250,4249,4251,4252,4253,4254,4254,4253,4255,4256,4257,4258,4258,4257,4259,4260,4261,4262,4262,4261,4263,4264,4265,4266,4266,4265,4267,4268,4269,4270,4270,4269,4271,4272,4273,4274,4274,4273,4275,4276,4277,4278,4278,4277,4279,4280,4281,4282,4282,4281,4283,4284,4285,4286,4286,4285,4287,4288,4289,4290,4290,4289,4291,4292,4293,4294,4294,4293,4295,4296,4297,4298,4298,4297,4299,4300,4301,4302,4302,4301,4303,4304,4305,4306,4306,4305,4307,4308,4309,4310,4310,4309,4311,4312,4313,4314,4314,4313,4315,4316,4317,4318,4318,4317,4319,4320,4321,4322,4322,4321,4323,4324,4325,4326,4326,4325,4327,4328,4329,4330,4330,4329,4331,4332,4333,4334,4334,4333,4335,4336,4337,4338,4338,4337,4339,4340,4341,4342,4342,4341,4343,4344,4345,4346,4346,4345,4347,4348,4349,4350,4350,4349,4351,4352,4353,4354,4354,4353,4355,4356,4357,4358,4358,4357,4359,4360,4361,4362,4362,4361,4363,4364,4365,4366,4366,4365,4367,4368,4369,4370,4370,4369,4371,4372,4373,4374,4374,4373,4375,4376,4377,4378,4378,4377,4379,4380,4381,4382,4382,4381,4383,4384,4385,4386,4386,4385,4387,4388,4389,4390,4390,4389,4391,4392,4393,4394,4394,4393,4395,4396,4397,4398,4398,4397,4399,4400,4401,4402,4402,4401,4403,4404,4405,4406,4406,4405,4407,4408,4409,4410,4410,4409,4411,4412,4413,4414,4414,4413,4415,4416,4417,4418,4418,4417,4419,4420,4421,4422,4422,4421,4423,4424,4425,4426,4426,4425,4427,4428,4429,4430,4430,4429,4431,4432,4433,4434,4434,4433,4435,4436,4437,4438,4438,4437,4439,4440,4441,4442,4442,4441,4443,4444,4445,4446,4446,4445,4447,4448,4449,4450,4450,4449,4451,4452,4453,4454,4454,4453,4455,4456,4457,4458,4458,4457,4459,4460,4461,4462,4462,4461,4463,4464,4465,4466,4466,4465,4467,4468,4469,4470,4470,4469,4471,4472,4473,4474,4474,4473,4475,4476,4477,4478,4478,4477,4479,4480,4481,4482,4482,4481,4483,4484,4485,4486,4486,4485,4487,4488,4489,4490,4490,4489,4491,4492,4493,4494,4494,4493,4495,4496,4497,4498,4498,4497,4499,4500,4501,4502,4502,4501,4503,4504,4505,4506,4506,4505,4507,4508,4509,4510,4510,4509,4511,4512,4513,4514,4514,4513,4515,4516,4517,4518,4518,4517,4519,4520,4521,4522,4522,4521,4523,4524,4525,4526,4526,4525,4527,4528,4529,4530,4530,4529,4531,4532,4533,4534,4534,4533,4535,4536,4537,4538,4538,4537,4539,4540,4541,4542,4542,4541,4543,4544,4545,4546,4546,4545,4547,4548,4549,4550,4550,4549,4551,4552,4553,4554,4554,4553,4555,4556,4557,4558,4558,4557,4559,4560,4561,4562,4562,4561,4563,4564,4565,4566,4566,4565,4567,4568,4569,4570,4570,4569,4571,4572,4573,4574,4574,4573,4575,4576,4577,4578,4578,4577,4579,4580,4581,4582,4582,4581,4583,4584,4585,4586,4586,4585,4587,4588,4589,4590,4590,4589,4591,4592,4593,4594,4594,4593,4595,4596,4597,4598,4598,4597,4599,4600,4601,4602,4602,4601,4603,4604,4605,4606,4606,4605,4607,4608,4609,4610,4610,4609,4611,4612,4613,4614,4614,4613,4615,4616,4617,4618,4618,4617,4619,4620,4621,4622,4622,4621,4623,4624,4625,4626,4626,4625,4627,4628,4629,4630,4630,4629,4631,4632,4633,4634,4634,4633,4635,4636,4637,4638,4638,4637,4639,4640,4641,4642,4642,4641,4643,4644,4645,4646,4646,4645,4647,4648,4649,4650,4650,4649,4651,4652,4653,4654,4654,4653,4655,4656,4657,4658,4658,4657,4659,4660,4661,4662,4662,4661,4663,4664,4665,4666,4666,4665,4667,4668,4669,4670,4670,4669,4671,4672,4673,4674,4674,4673,4675,4676,4677,4678,4678,4677,4679,4680,4681,4682,4682,4681,4683,4684,4685,4686,4686,4685,4687,4688,4689,4690,4690,4689,4691,4692,4693,4694,4694,4693,4695,4696,4697,4698,4698,4697,4699,4700,4701,4702,4702,4701,4703,4704,4705,4706,4706,4705,4707,4708,4709,4710,4710,4709,4711,4712,4713,4714,4714,4713,4715,4716,4717,4718,4718,4717,4719,4720,4721,4722,4722,4721,4723,4724,4725,4726,4726,4725,4727,4728,4729,4730,4730,4729,4731,4732,4733,4734,4734,4733,4735,4736,4737,4738,4738,4737,4739,4740,4741,4742,4742,4741,4743,4744,4745,4746,4746,4745,4747,4748,4749,4750,4750,4749,4751,4752,4753,4754,4754,4753,4755,4756,4757,4758,4758,4757,4759,4760,4761,4762,4762,4761,4763,4764,4765,4766,4766,4765,4767,4768,4769,4770,4770,4769,4771,4772,4773,4774,4774,4773,4775,4776,4777,4778,4778,4777,4779,4780,4781,4782,4782,4781,4783,4784,4785,4786,4786,4785,4787,4788,4789,4790,4790,4789,4791,4792,4793,4794,4794,4793,4795,4796,4797,4798,4798,4797,4799,4800,4801,4802,4802,4801,4803,4804,4805,4806,4806,4805,4807,4808,4809,4810,4810,4809,4811,4812,4813,4814,4814,4813,4815,4816,4817,4818,4818,4817,4819,4820,4821,4822,4822,4821,4823,4824,4825,4826,4826,4825,4827,4828,4829,4830,4830,4829,4831,4832,4833,4834,4834,4833,4835,4836,4837,4838,4838,4837,4839,4840,4841,4842,4842,4841,4843,4844,4845,4846,4846,4845,4847,4848,4849,4850,4850,4849,4851,4852,4853,4854,4854,4853,4855,4856,4857,4858,4858,4857,4859,4860,4861,4862,4862,4861,4863,4864,4865,4866,4866,4865,4867,4868,4869,4870,4870,4869,4871,4872,4873,4874,4874,4873,4875,4876,4877,4878,4878,4877,4879,4880,4881,4882,4882,4881,4883,4884,4885,4886,4886,4885,4887,4888,4889,4890,4890,4889,4891,4892,4893,4894,4894,4893,4895,4896,4897,4898,4898,4897,4899,4900,4901,4902,4902,4901,4903,4904,4905,4906,4906,4905,4907,4908,4909,4910,4910,4909,4911,4912,4913,4914,4914,4913,4915,4916,4917,4918,4918,4917,4919,4920,4921,4922,4922,4921,4923,4924,4925,4926,4926,4925,4927,4928,4929,4930,4930,4929,4931,4932,4933,4934,4934,4933,4935,4936,4937,4938,4938,4937,4939,4940,4941,4942,4942,4941,4943,4944,4945,4946,4946,4945,4947,4948,4949,4950,4950,4949,4951,4952,4953,4954,4954,4953,4955,4956,4957,4958,4958,4957,4959,4960,4961,4962,4962,4961,4963,4964,4965,4966,4966,4965,4967,4968,4969,4970,4970,4969,4971,4972,4973,4974,4974,4973,4975,4976,4977,4978,4978,4977,4979,4980,4981,4982,4982,4981,4983,4984,4985,4986,4986,4985,4987,4988,4989,4990,4990,4989,4991,4992,4993,4994,4994,4993,4995,4996,4997,4998,4998,4997,4999,5000,5001,5002,5002,5001,5003,5004,5005,5006,5006,5005,5007,5008
,5009,5010,5010,5009,5011,5012,5013,5014,5014,5013,5015,5016,5017,5018,5018,5017,5019,5020,5021,5022,5022,5021,5023,5024,5025,5026,5026,5025,5027,5028,5029,5030,5030,5029,5031,5032,5033,5034,5034,5033,5035,5036,5037,5038,5038,5037,5039,5040,5041,5042,5042,5041,5043,5044,5045,5046,5046,5045,5047,5048,5049,5050,5050,5049,5051,5052,5053,5054,5054,5053,5055,5056,5057,5058,5058,5057,5059,5060,5061,5062,5062,5061,5063,5064,5065,5066,5066,5065,5067,5068,5069,5070,5070,5069,5071,5072,5073,5074,5074,5073,5075,5076,5077,5078,5078,5077,5079,5080,5081,5082,5082,5081,5083,5084,5085,5086,5086,5085,5087,5088,5089,5090,5090,5089,5091,5092,5093,5094,5094,5093,5095,5096,5097,5098,5098,5097,5099,5100,5101,5102,5102,5101,5103,5104,5105,5106,5106,5105,5107,5108,5109,5110,5110,5109,5111,5112,5113,5114,5114,5113,5115,5116,5117,5118,5118,5117,5119,5120,5121,5122,5122,5121,5123,5124,5125,5126,5126,5125,5127,5128,5129,5130,5130,5129,5131,5132,5133,5134,5134,5133,5135,5136,5137,5138,5138,5137,5139,5140,5141,5142,5142,5141,5143,5144,5145,5146,5146,5145,5147,5148,5149,5150,5150,5149,5151,5152,5153,5154,5154,5153,5155,5156,5157,5158,5158,5157,5159,5160,5161,5162,5162,5161,5163,5164,5165,5166,5166,5165,5167,5168,5169,5170,5170,5169,5171,5172,5173,5174,5174,5173,5175,5176,5177,5178,5178,5177,5179,5180,5181,5182,5182,5181,5183,5184,5185,5186,5186,5185,5187,5188,5189,5190,5190,5189,5191,5192,5193,5194,5194,5193,5195,5196,5197,5198,5198,5197,5199,5200,5201,5202,5202,5201,5203,5204,5205,5206,5206,5205,5207,5208,5209,5210,5210,5209,5211,5212,5213,5214,5214,5213,5215,5216,5217,5218,5218,5217,5219,5220,5221,5222,5222,5221,5223,5224,5225,5226,5226,5225,5227,5228,5229,5230,5230,5229,5231,5232,5233,5234,5234,5233,5235,5236,5237,5238,5238,5237,5239,5240,5241,5242,5242,5241,5243,5244,5245,5246,5246,5245,5247,5248,5249,5250,5250,5249,5251,5252,5253,5254,5254,5253,5255,5256,5257,5258,5258,5257,5259,5260,5261,5262,5262,5261,5263,5264,5265,5266,5266,5265,5267,5268,5269,5270,5270,5269,5271,5272,5273,5274,5274,5273,5275,5276,5277,5278,5278,5277,5279,5280,5281,5282,5282,5281,5283,5284,5285,5286,5286,5285,5287,5288,5289,5290,5290,5289,5291,5292,5293,5294,5294,5293,5295,5296,5297,5298,5298,5297,5299,5300,5301,5302,5302,5301,5303,5304,5305,5306,5306,5305,5307,5308,5309,5310,5310,5309,5311,5312,5313,5314,5314,5313,5315,5316,5317,5318,5318,5317,5319,5320,5321,5322,5322,5321,5323,5324,5325,5326,5326,5325,5327,5328,5329,5330,5330,5329,5331,5332,5333,5334,5334,5333,5335,5336,5337,5338,5338,5337,5339,5340,5341,5342,5342,5341,5343,5344,5345,5346,5346,5345,5347,5348,5349,5350,5350,5349,5351,5352,5353,5354,5354,5353,5355,5356,5357,5358,5358,5357,5359,5360,5361,5362,5362,5361,5363,5364,5365,5366,5366,5365,5367,5368,5369,5370,5370,5369,5371,5372,5373,5374,5374,5373,5375,5376,5377,5378,5378,5377,5379,5380,5381,5382,5382,5381,5383,5384,5385,5386,5386,5385,5387,5388,5389,5390,5390,5389,5391,5392,5393,5394,5394,5393,5395,5396,5397,5398,5398,5397,5399,5400,5401,5402,5402,5401,5403,5404,5405,5406,5406,5405,5407,5408,5409,5410,5410,5409,5411,5412,5413,5414,5414,5413,5415,5416,5417,5418,5418,5417,5419,5420,5421,5422,5422,5421,5423,5424,5425,5426,5426,5425,5427,5428,5429,5430,5430,5429,5431,5432,5433,5434,5434,5433,5435,5436,5437,5438,5438,5437,5439,5440,5441,5442,5442,5441,5443,5444,5445,5446,5446,5445,5447,5448,5449,5450,5450,5449,5451,5452,5453,5454,5454,5453,5455,5456,5457,5458,5458,5457,5459,5460,5461,5462,5462,5461,5463,5464,5465,5466,5466,5465,5467,5468,5469,5470,5470,5469,5471,5472,5473,5474,5474,5473,5475,5476,5477,5478,5478,5477,5479,5480,5481,5482,5482,5481,5483,5484,5485,5486,5486,5485,5487,5488,5489,5490,5490,5489,5491,5492,5493,5494,5494,5493,5495,5496,5497,5498,5498,5497,5499,5500,5501,5502,5502,5501,5503,5504,5505,5506,5506,5505,5507,5508,5509,5510,5510,5509,5511,5512,5513,5514,5514,5513,5515,5516,5517,5518,5518,5517,5519,5520,5521,5522,5522,5521,5523,5524,5525,5526,5526,5525,5527,5528,5529,5530,5530,5529,5531,5532,5533,5534,5534,5533,5535,5536,5537,5538,5538,5537,5539,5540,5541,5542,5542,5541,5543,5544,5545,5546,5546,5545,5547,5548,5549,5550,5550,5549,5551,5552,5553,5554,5554,5553,5555,5556,5557,5558,5558,5557,5559,5560,5561,5562,5562,5561,5563,5564,5565,5566,5566,5565,5567,5568,5569,5570,5570,5569,5571,5572,5573,5574,5574,5573,5575,5576,5577,5578,5578,5577,5579,5580,5581,5582,5582,5581,5583,5584,5585,5586,5586,5585,5587,5588,5589,5590,5590,5589,5591,5592,5593,5594,5594,5593,5595,5596,5597,5598,5598,5597,5599,5600,5601,5602,5602,5601,5603,5604,5605,5606,5606,5605,5607,5608,5609,5610,5610,5609,5611,5612,5613,5614,5614,5613,5615,5616,5617,5618,5618,5617,5619,5620,5621,5622,5622,5621,5623,5624,5625,5626,5626,5625,5627,5628,5629,5630,5630,5629,5631,5632,5633,5634,5634,5633,5635,5636,5637,5638,5638,5637,5639,5640,5641,5642,5642,5641,5643,5644,5645,5646,5646,5645,5647,5648,5649,5650,5650,5649,5651,5652,5653,5654,5654,5653,5655,5656,5657,5658,5658,5657,5659,5660,5661,5662,5662,5661,5663,5664,5665,5666,5666,5665,5667,5668,5669,5670,5670,5669,5671,5672,5673,5674,5674,5673,5675,5676,5677,5678,5678,5677,5679,5680,5681,5682,5682,5681,5683,5684,5685,5686,5686,5685,5687,5688,5689,5690,5690,5689,5691,5692,5693,5694,5694,5693,5695,5696,5697,5698,5698,5697,5699,5700,5701,5702,5702,5701,5703,5704,5705,5706,5706,5705,5707,5708,5709,5710,5710,5709,5711,5712,5713,5714,5714,5713,5715,5716,5717,5718,5718,5717,5719,5720,5721,5722,5722,5721,5723,5724,5725,5726,5726,5725,5727,5728,5729,5730,5730,5729,5731,5732,5733,5734,5734,5733,5735,5736,5737,5738,5738,5737,5739,5740,5741,5742,5742,5741,5743,5744,5745,5746,5746,5745,5747,5748,5749,5750,5750,5749,5751,5752,5753,5754,5754,5753,5755,5756,5757,5758,5758,5757,5759,5760,5761,5762,5762,5761,5763,5764,5765,5766,5766,5765,5767,5768,5769,5770,5770,5769,5771,5772,5773,5774,5774,5773,5775,5776,5777,5778,5778,5777,5779,5780,5781,5782,5782,5781,5783,5784,5785,5786,5786,5785,5787,5788,5789,5790,5790,5789,5791,5792,5793,5794,5794,5793,5795,5796,5797,5798,5798,5797,5799,5800,5801,5802,5802,5801,5803,5804,5805,5806,5806,5805,5807,5808,5809,5810,5810,5809,5811,5812,5813,5814,5814,5813,5815,5816,5817,5818,5818,5817,5819,5820,5821,5822,5822,5821,5823,5824,5825,5826,5826,5825,5827,5828,5829,5830,5830,5829,5831,5832,5833,5834,5834,5833,5835,5836,5837,5838,5838,5837,5839,5840,5841,5842,5842,5841,5843,5844,5845,5846,5846,5845,5847,5848,5849,5850,5850,5849,5851,5852,5853,5854,5854,5853,5855,5856,5857,5858,5858,5857,5859,5860,5861,5862,5862,5861,5863,5864,5865,5866,5866,5865,5867,5868,5869,5870,5870,5869,5871,5872,5873,5874,5874,5873,5875,5876,5877,5878,5878,5877,5879,5880,5881,5882,5882,5881,5883,5884,5885,5886,5886,5885,5887,5888,5889,5890,5890,5889,5891,5892,5893,5894,5894,5893,5895,5896,5897,5898,5898,5897,5899,5900,5901,5902,5902,5901,5903,5904,5905,5906,5906,5905,5907,5908,5909,5910,5910,5909,5911,5912,5913,5914,5914,5913,5915,5916,5917,5918,5918,5917,5919,5920,5921,5922,5922,5921,5923,5924,5925,5926,5926,5925,5927,5928,5929,5930,5930,5929,5931,5932,5933,5934,5934,5933,5935,5936,5937,5938,5938,5937,5939,5940,5941,5942,5942,5941,5943,5944,5945,5946,5946,5945,5947,5948,5949,5950,5950,5949,5951,5952,5953,5954,5954,5953,5955,5956,5957,5958,5958,5957,5959,5960,5961,5962,5962,5961,5963,5964,5965,5966,5966,5965,5967,5968,5969,5970,5970,5969,5971,5972,5973,5974,5974,5973,5975,5976,5977,5978,5978,5977,5979,5980,5981,5982,5982,5981,5983,5984,5985,5986,5986,5985,5987,5988,5989,5990,5990,5989,5991,5992,5993,5994,5994,5993,5995,5996,5997,5998,5998,5997,5999,6000,6001,6002,6002,6001,6003,6004,6005,6006,6006,6005,6007,6008,6009,6010,6010,6009,6011,6012,6013,6014,6014,6013,6015,6016,6017,6018,6018,6017,6019,6020,6021,6022,6022,6021,6023,6024,6025,6026,6026,6025,6027,6028,6029,6030,6030,6029,6031,6032,6033,6034,6034,6033,6035,6036,6037,6038,6038,6037,6039,6040,6041,6042,6042,6041,6043,6044,6045,6046,6046,6045,6047,6048,6049,6050,6050,6049,6051,6052,6053,6054,6054,6053,6055,6056,6057,6058,6058,6057,6059,6060,6061,6062,6062,6061,6063,6064,6065,6066,6066,6065,6067,6068,6069,6070,6070,6069,6071,6072,6073,6074,6074,6073,6075,6076,6077,6078,6078,6077,6079,6080,6081,6082,6082,6081,6083,6084,6085,6086,6086,6085,6087,6088
,6089,6090,6090,6089,6091,6092,6093,6094,6094,6093,6095,6096,6097,6098,6098,6097,6099,6100,6101,6102,6102,6101,6103,6104,6105,6106,6106,6105,6107,6108,6109,6110,6110,6109,6111,6112,6113,6114,6114,6113,6115,6116,6117,6118,6118,6117,6119,6120,6121,6122,6122,6121,6123,6124,6125,6126,6126,6125,6127,6128,6129,6130,6130,6129,6131,6132,6133,6134,6134,6133,6135,6136,6137,6138,6138,6137,6139,6140,6141,6142,6142,6141,6143,6144,6145,6146,6146,6145,6147,6148,6149,6150,6150,6149,6151,6152,6153,6154,6154,6153,6155,6156,6157,6158,6158,6157,6159,6160,6161,6162,6162,6161,6163,6164,6165,6166,6166,6165,6167,6168,6169,6170,6170,6169,6171,6172,6173,6174,6174,6173,6175,6176,6177,6178,6178,6177,6179,6180,6181,6182,6182,6181,6183,6184,6185,6186,6186,6185,6187,6188,6189,6190,6190,6189,6191,6192,6193,6194,6194,6193,6195,6196,6197,6198,6198,6197,6199,6200,6201,6202,6202,6201,6203,6204,6205,6206,6206,6205,6207,6208,6209,6210,6210,6209,6211,6212,6213,6214,6214,6213,6215,6216,6217,6218,6218,6217,6219,6220,6221,6222,6222,6221,6223,6224,6225,6226,6226,6225,6227,6228,6229,6230,6230,6229,6231,6232,6233,6234,6234,6233,6235,6236,6237,6238,6238,6237,6239,6240,6241,6242,6242,6241,6243,6244,6245,6246,6246,6245,6247,6248,6249,6250,6250,6249,6251,6252,6253,6254,6254,6253,6255,6256,6257,6258,6258,6257,6259,6260,6261,6262,6262,6261,6263,6264,6265,6266,6266,6265,6267,6268,6269,6270,6270,6269,6271,6272,6273,6274,6274,6273,6275,6276,6277,6278,6278,6277,6279,6280,6281,6282,6282,6281,6283,6284,6285,6286,6286,6285,6287,6288,6289,6290,6290,6289,6291,6292,6293,6294,6294,6293,6295,6296,6297,6298,6298,6297,6299,6300,6301,6302,6302,6301,6303,6304,6305,6306,6306,6305,6307,6308,6309,6310,6310,6309,6311,6312,6313,6314,6314,6313,6315,6316,6317,6318,6318,6317,6319,6320,6321,6322,6322,6321,6323,6324,6325,6326,6326,6325,6327,6328,6329,6330,6330,6329,6331,6332,6333,6334,6334,6333,6335,6336,6337,6338,6338,6337,6339,6340,6341,6342,6342,6341,6343,6344,6345,6346,6346,6345,6347,6348,6349,6350,6350,6349,6351,6352,6353,6354,6354,6353,6355,6356,6357,6358,6358,6357,6359,6360,6361,6362,6362,6361,6363,6364,6365,6366,6366,6365,6367,6368,6369,6370,6370,6369,6371,6372,6373,6374,6374,6373,6375,6376,6377,6378,6378,6377,6379,6380,6381,6382,6382,6381,6383,6384,6385,6386,6386,6385,6387,6388,6389,6390,6390,6389,6391,6392,6393,6394,6394,6393,6395,6396,6397,6398,6398,6397,6399,6400,6401,6402,6402,6401,6403,6404,6405,6406,6406,6405,6407,6408,6409,6410,6410,6409,6411,6412,6413,6414,6414,6413,6415,6416,6417,6418,6418,6417,6419,6420,6421,6422,6422,6421,6423,6424,6425,6426,6426,6425,6427,6428,6429,6430,6430,6429,6431,6432,6433,6434,6434,6433,6435,6436,6437,6438,6438,6437,6439,6440,6441,6442,6442,6441,6443,6444,6445,6446,6446,6445,6447,6448,6449,6450,6450,6449,6451,6452,6453,6454,6454,6453,6455,6456,6457,6458,6458,6457,6459,6460,6461,6462,6462,6461,6463,6464,6465,6466,6466,6465,6467,6468,6469,6470,6470,6469,6471,6472,6473,6474,6474,6473,6475,6476,6477,6478,6478,6477,6479,6480,6481,6482,6482,6481,6483,6484,6485,6486,6486,6485,6487,6488,6489,6490,6490,6489,6491,6492,6493,6494,6494,6493,6495,6496,6497,6498,6498,6497,6499,6500,6501,6502,6502,6501,6503,6504,6505,6506,6506,6505,6507,6508,6509,6510,6510,6509,6511,6512,6513,6514,6514,6513,6515,6516,6517,6518,6518,6517,6519,6520,6521,6522,6522,6521,6523,6524,6525,6526,6526,6525,6527,6528,6529,6530,6530,6529,6531,6532,6533,6534,6534,6533,6535,6536,6537,6538,6538,6537,6539,6540,6541,6542,6542,6541,6543,6544,6545,6546,6546,6545,6547,6548,6549,6550,6550,6549,6551,6552,6553,6554,6554,6553,6555,6556,6557,6558,6558,6557,6559,6560,6561,6562,6562,6561,6563,6564,6565,6566,6566,6565,6567,6568,6569,6570,6570,6569,6571,6572,6573,6574,6574,6573,6575,6576,6577,6578,6578,6577,6579,6580,6581,6582,6582,6581,6583,6584,6585,6586,6586,6585,6587,6588,6589,6590,6590,6589,6591,6592,6593,6594,6594,6593,6595,6596,6597,6598,6598,6597,6599,6600,6601,6602,6602,6601,6603,6604,6605,6606,6606,6605,6607,6608,6609,6610,6610,6609,6611,6612,6613,6614,6614,6613,6615,6616,6617,6618,6618,6617,6619,6620,6621,6622,6622,6621,6623,6624,6625,6626,6626,6625,6627,6628,6629,6630,6630,6629,6631,6632,6633,6634,6634,6633,6635,6636,6637,6638,6638,6637,6639,6640,6641,6642,6642,6641,6643,6644,6645,6646,6646,6645,6647,6648,6649,6650,6650,6649,6651,6652,6653,6654,6654,6653,6655,6656,6657,6658,6658,6657,6659,6660,6661,6662,6662,6661,6663,6664,6665,6666,6666,6665,6667,6668,6669,6670,6670,6669,6671,6672,6673,6674,6674,6673,6675,6676,6677,6678,6678,6677,6679,6680,6681,6682,6682,6681,6683,6684,6685,6686,6686,6685,6687,6688,6689,6690,6690,6689,6691,6692,6693,6694,6694,6693,6695,6696,6697,6698,6698,6697,6699,6700,6701,6702,6702,6701,6703,6704,6705,6706,6706,6705,6707,6708,6709,6710,6710,6709,6711,6712,6713,6714,6714,6713,6715,6716,6717,6718,6718,6717,6719,6720,6721,6722,6722,6721,6723,6724,6725,6726,6726,6725,6727,6728,6729,6730,6730,6729,6731,6732,6733,6734,6734,6733,6735,6736,6737,6738,6738,6737,6739,6740,6741,6742,6742,6741,6743,6744,6745,6746,6746,6745,6747,6748,6749,6750,6750,6749,6751,6752,6753,6754,6754,6753,6755,6756,6757,6758,6758,6757,6759,6760,6761,6762,6762,6761,6763,6764,6765,6766,6766,6765,6767,6768,6769,6770,6770,6769,6771,6772,6773,6774,6774,6773,6775,6776,6777,6778,6778,6777,6779,6780,6781,6782,6782,6781,6783,6784,6785,6786,6786,6785,6787,6788,6789,6790,6790,6789,6791,6792,6793,6794,6794,6793,6795,6796,6797,6798,6798,6797,6799,6800,6801,6802,6802,6801,6803,6804,6805,6806,6806,6805,6807,6808,6809,6810,6810,6809,6811,6812,6813,6814,6814,6813,6815,6816,6817,6818,6818,6817,6819,6820,6821,6822,6822,6821,6823,6824,6825,6826,6826,6825,6827,6828,6829,6830,6830,6829,6831,6832,6833,6834,6834,6833,6835,6836,6837,6838,6838,6837,6839,6840,6841,6842,6842,6841,6843,6844,6845,6846,6846,6845,6847,6848,6849,6850,6850,6849,6851,6852,6853,6854,6854,6853,6855,6856,6857,6858,6858,6857,6859,6860,6861,6862,6862,6861,6863,6864,6865,6866,6866,6865,6867,6868,6869,6870,6870,6869,6871,6872,6873,6874,6874,6873,6875,6876,6877,6878,6878,6877,6879,6880,6881,6882,6882,6881,6883,6884,6885,6886,6886,6885,6887,6888,6889,6890,6890,6889,6891,6892,6893,6894,6894,6893,6895,6896,6897,6898,6898,6897,6899,6900,6901,6902,6902,6901,6903,6904,6905,6906,6906,6905,6907,6908,6909,6910,6910,6909,6911,6912,6913,6914,6914,6913,6915,6916,6917,6918,6918,6917,6919,6920,6921,6922,6922,6921,6923,6924,6925,6926,6926,6925,6927,6928,6929,6930,6930,6929,6931,6932,6933,6934,6934,6933,6935,6936,6937,6938,6938,6937,6939,6940,6941,6942,6942,6941,6943,6944,6945,6946,6946,6945,6947,6948,6949,6950,6950,6949,6951,6952,6953,6954,6954,6953,6955,6956,6957,6958,6958,6957,6959,6960,6961,6962,6962,6961,6963,6964,6965,6966,6966,6965,6967,6968,6969,6970,6970,6969,6971,6972,6973,6974,6974,6973,6975,6976,6977,6978,6978,6977,6979,6980,6981,6982,6982,6981,6983,6984,6985,6986,6986,6985,6987,6988,6989,6990,6990,6989,6991,6992,6993,6994,6994,6993,6995,6996,6997,6998,6998,6997,6999,7000,7001,7002,7002,7001,7003,7004,7005,7006,7006,7005,7007,7008,7009,7010,7010,7009,7011,7012,7013,7014,7014,7013,7015,7016,7017,7018,7018,7017,7019,7020,7021,7022,7022,7021,7023,7024,7025,7026,7026,7025,7027,7028,7029,7030,7030,7029,7031,7032,7033,7034,7034,7033,7035,7036,7037,7038,7038,7037,7039,7040,7041,7042,7042,7041,7043,7044,7045,7046,7046,7045,7047,7048,7049,7050,7050,7049,7051,7052,7053,7054,7054,7053,7055,7056,7057,7058,7058,7057,7059,7060,7061,7062,7062,7061,7063,7064,7065,7066,7066,7065,7067,7068,7069,7070,7070,7069,7071,7072,7073,7074,7074,7073,7075,7076,7077,7078,7078,7077,7079,7080,7081,7082,7082,7081,7083,7084,7085,7086,7086,7085,7087,7088,7089,7090,7090,7089,7091,7092,7093,7094,7094,7093,7095,7096,7097,7098,7098,7097,7099,7100,7101,7102,7102,7101,7103,7104,7105,7106,7106,7105,7107,7108,7109,7110,7110,7109,7111,7112,7113,7114,7114,7113,7115,7116,7117,7118,7118,7117,7119,7120,7121,7122,7122,7121,7123,7124,7125,7126,7126,7125,7127,7128,7129,7130,7130,7129,7131,7132,7133,7134,7134,7133,7135,7136,7137,7138,7138,7137,7139,7140,7141,7142,7142,7141,7143,7144,7145,7146,7146,7145,7147,7148,7149,7150,7150,7149,7151,7152,7153,7154,7154,7153,7155,7156,7157,7158,7158,7157,7159,7160,7161,7162,7162,7161,7163,7164,7165,7166,7166,7165,7167,7168,7169,7170,7170,7169,7171,7172,7173,7174,7174,7173,7175,7176,7177,7178,7178,7177,7179,7180,7181,7182,7182,7181,7183,7184,7185,7186,7186,7185,7187,7188,7189,7190,7190,7189,7191,7192,7193,7194,7194,7193,7195,7196,7197,7198,7198,7197,7199,7200,7201,7202,7202,7201,7203,7204,7205,7206,7206,7205,7207,7208,7209,7210,7210,7209,7211,7212,7213,7214,7214,7213,7215,7216,7217,7218,7218,7217,7219,7220,7221,7222,7222,7221,7223,7224,7225,7226,7226,7225,7227,7228,7229,7230,7230,7229,7231,7232,7233,7234,7234,7233,7235,7236,7237,7238,7238,7237,7239,7240,7241,7242,7242,7241,7243,7244,7245,7246,7246,7245,7247,7248,7249,7250,7250,7249,7251,7252,7253,7254,7254,7253,7255,7256,7257,7258,7258,7257,7259,7260,7261,7262,7262,7261,7263,7264,7265,7266,7266,7265,7267,7268,7269,7270,7270,7269,7271,7272,7273,7274,7274,7273,7275,7276,7277,7278,7278,7277,7279,7280,7281,7282,7282,7281,7283,7284,7285,7286,7286,7285,7287,7288,7289,7290,7290,7289,7291,7292,7293,7294,7294,7293,7295,7296,7297,7298,7298,7297,7299,7300,7301,7302,7302,7301,7303,7304,7305,7306,7306,7305,7307,7308,7309,7310,7310,7309,7311,7312,7313,7314,7314,7313,7315,7316,7317,7318,7318,7317,7319,7320,7321,7322,7322,7321,7323,7324,7325,7326,7326,7325,7327,7328,7329,7330,7330,7329,7331,7332,7333,7334,7334,7333,7335,7336,7337,7338,7338,7337,7339,7340,7341,7342,7342,7341,7343,7344,7345,7346,7346,7345,7347,7348,7349,7350,7350,7349,7351,7352,7353,7354,7354,7353,7355,7356,7357,7358,7358,7357,7359,7360,7361,7362,7362,7361,7363,7364,7365,7366,7366,7365,7367,7368,7369,7370,7370,7369,7371,7372,7373,7374,7374,7373,7375,7376,7377,7378,7378,7377,7379,7380,7381,7382,7382,7381,7383,7384,7385,7386,7386,7385,7387,7388,7389,7390,7390,7389,7391,7392,7393,7394,7394,7393,7395,7396,7397,7398,7398,7397,7399,7400,7401,7402,7402,7401,7403,7404,7405,7406,7406,7405,7407,7408,7409,7410,7410,7409,7411,7412,7413,7414,7414,7413,7415,7416,7417,7418,7418,7417,7419,7420,7421,7422,7422,7421,7423,7424,7425,7426,7426,7425,7427,7428,7429,7430,7430,7429,7431,7432,7433,7434,7434,7433,7435,7436,7437,7438,7438,7437,7439,7440,7441,7442,7442,7441,7443,7444,7445,7446,7446,7445,7447,7448,7449,7450,7450,7449,7451,7452,7453,7454,7454,7453,7455,7456,7457,7458,7458,7457,7459,7460,7461,7462,7462,7461,7463,7464,7465,7466,7466,7465,7467,7468
,7469,7470,7470,7469,7471,7472,7473,7474,7474,7473,7475,7476,7477,7478,7478,7477,7479,7480,7481,7482,7482,7481,7483,7484,7485,7486,7486,7485,7487,7488,7489,7490,7490,7489,7491,7492,7493,7494,7494,7493,7495,7496,7497,7498,7498,7497,7499,7500,7501,7502,7502,7501,7503,7504,7505,7506,7506,7505,7507,7508,7509,7510,7510,7509,7511,7512,7513,7514,7514,7513,7515,7516,7517,7518,7518,7517,7519,7520,7521,7522,7522,7521,7523,7524,7525,7526,7526,7525,7527,7528,7529,7530,7530,7529,7531,7532,7533,7534,7534,7533,7535,7536,7537,7538,7538,7537,7539,7540,7541,7542,7542,7541,7543,7544,7545,7546,7546,7545,7547,7548,7549,7550,7550,7549,7551,7552,7553,7554,7554,7553,7555,7556,7557,7558,7558,7557,7559,7560,7561,7562,7562,7561,7563,7564,7565,7566,7566,7565,7567,7568,7569,7570,7570,7569,7571,7572,7573,7574,7574,7573,7575,7576,7577,7578,7578,7577,7579,7580,7581,7582,7582,7581,7583,7584,7585,7586,7586,7585,7587,7588,7589,7590,7590,7589,7591,7592,7593,7594,7594,7593,7595,7596,7597,7598,7598,7597,7599,7600,7601,7602,7602,7601,7603,7604,7605,7606,7606,7605,7607,7608,7609,7610,7610,7609,7611,7612,7613,7614,7614,7613,7615,7616,7617,7618,7618,7617,7619,7620,7621,7622,7622,7621,7623,7624,7625,7626,7626,7625,7627,7628,7629,7630,7630,7629,7631,7632,7633,7634,7634,7633,7635,7636,7637,7638,7638,7637,7639,7640,7641,7642,7642,7641,7643,7644,7645,7646,7646,7645,7647,7648,7649,7650,7650,7649,7651,7652,7653,7654,7654,7653,7655,7656,7657,7658,7658,7657,7659,7660,7661,7662,7662,7661,7663,7664,7665,7666,7666,7665,7667,7668,7669,7670,7670,7669,7671,7672,7673,7674,7674,7673,7675,7676,7677,7678,7678,7677,7679,7680,7681,7682,7682,7681,7683,7684,7685,7686,7686,7685,7687,7688,7689,7690,7690,7689,7691,7692,7693,7694,7694,7693,7695,7696,7697,7698,7698,7697,7699,7700,7701,7702,7702,7701,7703,7704,7705,7706,7706,7705,7707,7708,7709,7710,7710,7709,7711,7712,7713,7714,7714,7713,7715,7716,7717,7718,7718,7717,7719,7720,7721,7722,7722,7721,7723,7724,7725,7726,7726,7725,7727,7728,7729,7730,7730,7729,7731,7732,7733,7734,7734,7733,7735,7736,7737,7738,7738,7737,7739,7740,7741,7742,7742,7741,7743,7744,7745,7746,7746,7745,7747,7748,7749,7750,7750,7749,7751,7752,7753,7754,7754,7753,7755,7756,7757,7758,7758,7757,7759,7760,7761,7762,7762,7761,7763,7764,7765,7766,7766,7765,7767,7768,7769,7770,7770,7769,7771,7772,7773,7774,7774,7773,7775,7776,7777,7778,7778,7777,7779,7780,7781,7782,7782,7781,7783,7784,7785,7786,7786,7785,7787,7788,7789,7790,7790,7789,7791,7792,7793,7794,7794,7793,7795,7796,7797,7798,7798,7797,7799,7800,7801,7802,7802,7801,7803,7804,7805,7806,7806,7805,7807,7808,7809,7810,7810,7809,7811,7812,7813,7814,7814,7813,7815,7816,7817,7818,7818,7817,7819,7820,7821,7822,7822,7821,7823,7824,7825,7826,7826,7825,7827,7828,7829,7830,7830,7829,7831,7832,7833,7834,7834,7833,7835,7836,7837,7838,7838,7837,7839,7840,7841,7842,7842,7841,7843,7844,7845,7846,7846,7845,7847,7848,7849,7850,7850,7849,7851,7852,7853,7854,7854,7853,7855,7856,7857,7858,7858,7857,7859,7860,7861,7862,7862,7861,7863,7864,7865,7866,7866,7865,7867,7868,7869,7870,7870,7869,7871,7872,7873,7874,7874,7873,7875,7876,7877,7878,7878,7877,7879,7880,7881,7882,7882,7881,7883,7884,7885,7886,7886,7885,7887,7888,7889,7890,7890,7889,7891,7892,7893,7894,7894,7893,7895,7896,7897,7898,7898,7897,7899,7900,7901,7902,7902,7901,7903,7904,7905,7906,7906,7905,7907,7908,7909,7910,7910,7909,7911,7912,7913,7914,7914,7913,7915,7916,7917,7918,7918,7917,7919,7920,7921,7922,7922,7921,7923,7924,7925,7926,7926,7925,7927,7928,7929,7930,7930,7929,7931,7932,7933,7934,7934,7933,7935,7936,7937,7938,7938,7937,7939,7940,7941,7942,7942,7941,7943,7944,7945,7946,7946,7945,7947,7948,7949,7950,7950,7949,7951,7952,7953,7954,7954,7953,7955,7956,7957,7958,7958,7957,7959,7960,7961,7962,7962,7961,7963,7964,7965,7966,7966,7965,7967,7968,7969,7970,7970,7969,7971,7972,7973,7974,7974,7973,7975,7976,7977,7978,7978,7977,7979,7980,7981,7982,7982,7981,7983,7984,7985,7986,7986,7985,7987,7988,7989,7990,7990,7989,7991,7992,7993,7994,7994,7993,7995,7996,7997,7998,7998,7997,7999,8000,8001,8002,8002,8001,8003,8004,8005,8006,8006,8005,8007,8008,8009,8010,8010,8009,8011,8012,8013,8014,8014,8013,8015,8016,8017,8018,8018,8017,8019,8020,8021,8022,8022,8021,8023,8024,8025,8026,8026,8025,8027,8028,8029,8030,8030,8029,8031,8032,8033,8034,8034,8033,8035,8036,8037,8038,8038,8037,8039,8040,8041,8042,8042,8041,8043,8044,8045,8046,8046,8045,8047,8048,8049,8050,8050,8049,8051,8052,8053,8054,8054,8053,8055,8056,8057,8058,8058,8057,8059,8060,8061,8062,8062,8061,8063,8064,8065,8066,8066,8065,8067,8068,8069,8070,8070,8069,8071,8072,8073,8074,8074,8073,8075,8076,8077,8078,8078,8077,8079,8080,8081,8082,8082,8081,8083,8084,8085,8086,8086,8085,8087,8088,8089,8090,8090,8089,8091,8092,8093,8094,8094,8093,8095,8096,8097,8098,8098,8097,8099,8100,8101,8102,8102,8101,8103,8104,8105,8106,8106,8105,8107,8108,8109,8110,8110,8109,8111,8112,8113,8114,8114,8113,8115,8116,8117,8118,8118,8117,8119,8120,8121,8122,8122,8121,8123,8124,8125,8126,8126,8125,8127,8128,8129,8130,8130,8129,8131,8132,8133,8134,8134,8133,8135,8136,8137,8138,8138,8137,8139,8140,8141,8142,8142,8141,8143,8144,8145,8146,8146,8145,8147,8148,8149,8150,8150,8149,8151,8152,8153,8154,8154,8153,8155,8156,8157,8158,8158,8157,8159,8160,8161,8162,8162,8161,8163,8164,8165,8166,8166,8165,8167,8168,8169,8170,8170,8169,8171,8172,8173,8174,8174,8173,8175,8176,8177,8178,8178,8177,8179,8180,8181,8182,8182,8181,8183,8184,8185,8186,8186,8185,8187,8188,8189,8190,8190,8189,8191,8192,8193,8194,8194,8193,8195,8196,8197,8198,8198,8197,8199,8200,8201,8202,8202,8201,8203,8204,8205,8206,8206,8205,8207,8208,8209,8210,8210,8209,8211,8212,8213,8214,8214,8213,8215,8216,8217,8218,8218,8217,8219,8220,8221,8222,8222,8221,8223,8224,8225,8226,8226,8225,8227,8228,8229,8230,8230,8229,8231,8232,8233,8234,8234,8233,8235,8236,8237,8238,8238,8237,8239,8240,8241,8242,8242,8241,8243,8244,8245,8246,8246,8245,8247,8248,8249,8250,8250,8249,8251,8252,8253,8254,8254,8253,8255,8256,8257,8258,8258,8257,8259,8260,8261,8262,8262,8261,8263,8264,8265,8266,8266,8265,8267,8268,8269,8270,8270,8269,8271,8272,8273,8274,8274,8273,8275,8276,8277,8278,8278,8277,8279,8280,8281,8282,8282,8281,8283,8284,8285,8286,8286,8285,8287,8288,8289,8290,8290,8289,8291,8292,8293,8294,8294,8293,8295,8296,8297,8298,8298,8297,8299,8300,8301,8302,8302,8301,8303,8304,8305,8306,8306,8305,8307,8308,8309,8310,8310,8309,8311,8312,8313,8314,8314,8313,8315,8316,8317,8318,8318,8317,8319,8320,8321,8322,8322,8321,8323,8324,8325,8326,8326,8325,8327,8328,8329,8330,8330,8329,8331,8332,8333,8334,8334,8333,8335,8336,8337,8338,8338,8337,8339,8340,8341,8342,8342,8341,8343,8344,8345,8346,8346,8345,8347,8348,8349,8350,8350,8349,8351,8352,8353,8354,8354,8353,8355,8356,8357,8358,8358,8357,8359,8360,8361,8362,8362,8361,8363,8364,8365,8366,8366,8365,8367,8368,8369,8370,8370,8369,8371,8372,8373,8374,8374,8373,8375,8376,8377,8378,8378,8377,8379,8380,8381,8382,8382,8381,8383,8384,8385,8386,8386,8385,8387,8388,8389,8390,8390,8389,8391,8392,8393,8394,8394,8393,8395,8396,8397,8398,8398,8397,8399,8400,8401,8402,8402,8401,8403,8404,8405,8406,8406,8405,8407,8408,8409,8410,8410,8409,8411,8412,8413,8414,8414,8413,8415,8416,8417,8418,8418,8417,8419,8420,8421,8422,8422,8421,8423,8424,8425,8426,8426,8425,8427,8428,8429,8430,8430,8429,8431,8432,8433,8434,8434,8433,8435,8436,8437,8438,8438,8437,8439,8440,8441,8442,8442,8441,8443,8444,8445,8446,8446,8445,8447,8448,8449,8450,8450,8449,8451,8452,8453,8454,8454,8453,8455,8456,8457,8458,8458,8457,8459,8460,8461,8462,8462,8461,8463,8464,8465,8466,8466,8465,8467,8468,8469,8470,8470,8469,8471,8472,8473,8474,8474,8473,8475,8476,8477,8478,8478,8477,8479,8480,8481,8482,8482,8481,8483,8484,8485,8486,8486,8485,8487,8488,8489,8490,8490,8489,8491,8492,8493,8494,8494,8493,8495,8496,8497,8498,8498,8497,8499,8500,8501,8502,8502,8501,8503,8504,8505,8506,8506,8505,8507,8508,8509,8510,8510,8509,8511,8512,8513,8514,8514,8513,8515,8516,8517,8518,8518,8517,8519,8520,8521,8522,8522,8521,8523,8524,8525,8526,8526,8525,8527,8528,8529,8530,8530,8529,8531,8532,8533,8534,8534,8533,8535,8536,8537,8538,8538,8537,8539,8540,8541,8542,8542,8541,8543,8544,8545,8546,8546,8545,8547,8548
,8549,8550,8550,8549,8551,8552,8553,8554,8554,8553,8555,8556,8557,8558,8558,8557,8559,8560,8561,8562,8562,8561,8563,8564,8565,8566,8566,8565,8567,8568,8569,8570,8570,8569,8571,8572,8573,8574,8574,8573,8575,8576,8577,8578,8578,8577,8579,8580,8581,8582,8582,8581,8583,8584,8585,8586,8586,8585,8587,8588,8589,8590,8590,8589,8591,8592,8593,8594,8594,8593,8595,8596,8597,8598,8598,8597,8599,8600,8601,8602,8602,8601,8603,8604,8605,8606,8606,8605,8607,8608,8609,8610,8610,8609,8611,8612,8613,8614,8614,8613,8615,8616,8617,8618,8618,8617,8619,8620,8621,8622,8622,8621,8623,8624,8625,8626,8626,8625,8627,8628,8629,8630,8630,8629,8631,8632,8633,8634,8634,8633,8635,8636,8637,8638,8638,8637,8639,8640,8641,8642,8642,8641,8643,8644,8645,8646,8646,8645,8647,8648,8649,8650,8650,8649,8651,8652,8653,8654,8654,8653,8655,8656,8657,8658,8658,8657,8659,8660,8661,8662,8662,8661,8663,8664,8665,8666,8666,8665,8667,8668,8669,8670,8670,8669,8671,8672,8673,8674,8674,8673,8675,8676,8677,8678,8678,8677,8679,8680,8681,8682,8682,8681,8683,8684,8685,8686,8686,8685,8687,8688,8689,8690,8690,8689,8691,8692,8693,8694,8694,8693,8695,8696,8697,8698,8698,8697,8699,8700,8701,8702,8702,8701,8703,8704,8705,8706,8706,8705,8707,8708,8709,8710,8710,8709,8711,8712,8713,8714,8714,8713,8715,8716,8717,8718,8718,8717,8719,8720,8721,8722,8722,8721,8723,8724,8725,8726,8726,8725,8727,8728,8729,8730,8730,8729,8731,8732,8733,8734,8734,8733,8735,8736,8737,8738,8738,8737,8739,8740,8741,8742,8742,8741,8743,8744,8745,8746,8746,8745,8747,8748,8749,8750,8750,8749,8751,8752,8753,8754,8754,8753,8755,8756,8757,8758,8758,8757,8759,8760,8761,8762,8762,8761,8763,8764,8765,8766,8766,8765,8767,8768,8769,8770,8770,8769,8771,8772,8773,8774,8774,8773,8775,8776,8777,8778,8778,8777,8779,8780,8781,8782,8782,8781,8783,8784,8785,8786,8786,8785,8787,8788,8789,8790,8790,8789,8791,8792,8793,8794,8794,8793,8795,8796,8797,8798,8798,8797,8799,8800,8801,8802,8802,8801,8803,8804,8805,8806,8806,8805,8807,8808,8809,8810,8810,8809,8811,8812,8813,8814,8814,8813,8815,8816,8817,8818,8818,8817,8819,8820,8821,8822,8822,8821,8823,8824,8825,8826,8826,8825,8827,8828,8829,8830,8830,8829,8831,8832,8833,8834,8834,8833,8835,8836,8837,8838,8838,8837,8839,8840,8841,8842,8842,8841,8843,8844,8845,8846,8846,8845,8847,8848,8849,8850,8850,8849,8851,8852,8853,8854,8854,8853,8855,8856,8857,8858,8858,8857,8859,8860,8861,8862,8862,8861,8863,8864,8865,8866,8866,8865,8867,8868,8869,8870,8870,8869,8871,8872,8873,8874,8874,8873,8875,8876,8877,8878,8878,8877,8879,8880,8881,8882,8882,8881,8883,8884,8885,8886,8886,8885,8887,8888,8889,8890,8890,8889,8891,8892,8893,8894,8894,8893,8895,8896,8897,8898,8898,8897,8899,8900,8901,8902,8902,8901,8903,8904,8905,8906,8906,8905,8907,8908,8909,8910,8910,8909,8911,8912,8913,8914,8914,8913,8915,8916,8917,8918,8918,8917,8919,8920,8921,8922,8922,8921,8923,8924,8925,8926,8926,8925,8927,8928,8929,8930,8930,8929,8931,8932,8933,8934,8934,8933,8935,8936,8937,8938,8938,8937,8939,8940,8941,8942,8942,8941,8943,8944,8945,8946,8946,8945,8947,8948,8949,8950,8950,8949,8951,8952,8953,8954,8954,8953,8955,8956,8957,8958,8958,8957,8959,8960,8961,8962,8962,8961,8963,8964,8965,8966,8966,8965,8967,8968,8969,8970,8970,8969,8971,8972,8973,8974,8974,8973,8975,8976,8977,8978,8978,8977,8979,8980,8981,8982,8982,8981,8983,8984,8985,8986,8986,8985,8987,8988,8989,8990,8990,8989,8991,8992,8993,8994,8994,8993,8995,8996,8997,8998,8998,8997,8999,9000,9001,9002,9002,9001,9003,9004,9005,9006,9006,9005,9007,9008,9009,9010,9010,9009,9011,9012,9013,9014,9014,9013,9015,9016,9017,9018,9018,9017,9019,9020,9021,9022,9022,9021,9023,9024,9025,9026,9026,9025,9027,9028,9029,9030,9030,9029,9031,9032,9033,9034,9034,9033,9035,9036,9037,9038,9038,9037,9039,9040,9041,9042,9042,9041,9043,9044,9045,9046,9046,9045,9047,9048,9049,9050,9050,9049,9051,9052,9053,9054,9054,9053,9055,9056,9057,9058,9058,9057,9059,9060,9061,9062,9062,9061,9063,9064,9065,9066,9066,9065,9067,9068,9069,9070,9070,9069,9071,9072,9073,9074,9074,9073,9075,9076,9077,9078,9078,9077,9079,9080,9081,9082,9082,9081,9083,9084,9085,9086,9086,9085,9087,9088,9089,9090,9090,9089,9091,9092,9093,9094,9094,9093,9095,9096,9097,9098,9098,9097,9099,9100,9101,9102,9102,9101,9103,9104,9105,9106,9106,9105,9107,9108,9109,9110,9110,9109,9111,9112,9113,9114,9114,9113,9115,9116,9117,9118,9118,9117,9119,9120,9121,9122,9122,9121,9123,9124,9125,9126,9126,9125,9127,9128,9129,9130,9130,9129,9131,9132,9133,9134,9134,9133,9135,9136,9137,9138,9138,9137,9139,9140,9141,9142,9142,9141,9143,9144,9145,9146,9146,9145,9147,9148,9149,9150,9150,9149,9151,9152,9153,9154,9154,9153,9155,9156,9157,9158,9158,9157,9159,9160,9161,9162,9162,9161,9163,9164,9165,9166,9166,9165,9167,9168,9169,9170,9170,9169,9171,9172,9173,9174,9174,9173,9175,9176,9177,9178,9178,9177,9179,9180,9181,9182,9182,9181,9183,9184,9185,9186,9186,9185,9187,9188,9189,9190,9190,9189,9191,9192,9193,9194,9194,9193,9195,9196,9197,9198,9198,9197,9199,9200,9201,9202,9202,9201,9203,9204,9205,9206,9206,9205,9207,9208,9209,9210,9210,9209,9211,9212,9213,9214,9214,9213,9215,9216,9217,9218,9218,9217,9219,9220,9221,9222,9222,9221,9223,9224,9225,9226,9226,9225,9227,9228,9229,9230,9230,9229,9231,9232,9233,9234,9234,9233,9235,9236,9237,9238,9238,9237,9239,9240,9241,9242,9242,9241,9243,9244,9245,9246,9246,9245,9247,9248,9249,9250,9250,9249,9251,9252,9253,9254,9254,9253,9255,9256,9257,9258,9258,9257,9259,9260,9261,9262,9262,9261,9263,9264,9265,9266,9266,9265,9267,9268,9269,9270,9270,9269,9271,9272,9273,9274,9274,9273,9275,9276,9277,9278,9278,9277,9279,9280,9281,9282,9282,9281,9283,9284,9285,9286,9286,9285,9287,9288,9289,9290,9290,9289,9291,9292,9293,9294,9294,9293,9295,9296,9297,9298,9298,9297,9299,9300,9301,9302,9302,9301,9303,9304,9305,9306,9306,9305,9307,9308,9309,9310,9310,9309,9311,9312,9313,9314,9314,9313,9315,9316,9317,9318,9318,9317,9319,9320,9321,9322,9322,9321,9323,9324,9325,9326,9326,9325,9327,9328,9329,9330,9330,9329,9331,9332,9333,9334,9334,9333,9335,9336,9337,9338,9338,9337,9339,9340,9341,9342,9342,9341,9343,9344,9345,9346,9346,9345,9347,9348,9349,9350,9350,9349,9351,9352,9353,9354,9354,9353,9355,9356,9357,9358,9358,9357,9359,9360,9361,9362,9362,9361,9363,9364,9365,9366,9366,9365,9367,9368,9369,9370,9370,9369,9371,9372,9373,9374,9374,9373,9375,9376,9377,9378,9378,9377,9379,9380,9381,9382,9382,9381,9383,9384,9385,9386,9386,9385,9387,9388,9389,9390,9390,9389,9391,9392,9393,9394,9394,9393,9395,9396,9397,9398,9398,9397,9399,9400,9401,9402,9402,9401,9403,9404,9405,9406,9406,9405,9407,9408,9409,9410,9410,9409,9411,9412,9413,9414,9414,9413,9415,9416,9417,9418,9418,9417,9419,9420,9421,9422,9422,9421,9423,9424,9425,9426,9426,9425,9427,9428,9429,9430,9430,9429,9431,9432,9433,9434,9434,9433,9435,9436,9437,9438,9438,9437,9439,9440,9441,9442,9442,9441,9443,9444,9445,9446,9446,9445,9447,9448,9449,9450,9450,9449,9451,9452,9453,9454,9454,9453,9455,9456,9457,9458,9458,9457,9459,9460,9461,9462,9462,9461,9463,9464,9465,9466,9466,9465,9467,9468,9469,9470,9470,9469,9471,9472,9473,9474,9474,9473,9475,9476,9477,9478,9478,9477,9479,9480,9481,9482,9482,9481,9483,9484,9485,9486,9486,9485,9487,9488,9489,9490,9490,9489,9491,9492,9493,9494,9494,9493,9495,9496,9497,9498,9498,9497,9499,9500,9501,9502,9502,9501,9503,9504,9505,9506,9506,9505,9507,9508,9509,9510,9510,9509,9511,9512,9513,9514,9514,9513,9515,9516,9517,9518,9518,9517,9519,9520,9521,9522,9522,9521,9523,9524,9525,9526,9526,9525,9527,9528,9529,9530,9530,9529,9531,9532,9533,9534,9534,9533,9535,9536,9537,9538,9538,9537,9539,9540,9541,9542,9542,9541,9543,9544,9545,9546,9546,9545,9547,9548,9549,9550,9550,9549,9551,9552,9553,9554,9554,9553,9555,9556,9557,9558,9558,9557,9559,9560,9561,9562,9562,9561,9563,9564,9565,9566,9566,9565,9567,9568,9569,9570,9570,9569,9571,9572,9573,9574,9574,9573,9575,9576,9577,9578,9578,9577,9579,9580,9581,9582,9582,9581,9583,9584,9585,9586,9586,9585,9587,9588,9589,9590,9590,9589,9591,9592,9593,9594,9594,9593,9595,9596,9597,9598,9598,9597,9599,9600,9601,9602,9602,9601,9603,9604,9605,9606,9606,9605,9607,9608,9609,9610,9610,9609,9611,9612,9613,9614,9614,9613,9615,9616,9617,9618,9618,9617,9619,9620,9621,9622,9622,9621,9623,9624,9625,9626,9626,9625,9627
,9628,9629,9630,9630,9629,9631,9632,9633,9634,9634,9633,9635,9636,9637,9638,9638,9637,9639,9640,9641,9642,9642,9641,9643,9644,9645,9646,9646,9645,9647,9648,9649,9650,9650,9649,9651,9652,9653,9654,9654,9653,9655,9656,9657,9658,9658,9657,9659,9660,9661,9662,9662,9661,9663,9664,9665,9666,9666,9665,9667,9668,9669,9670,9670,9669,9671,9672,9673,9674,9674,9673,9675,9676,9677,9678,9678,9677,9679,9680,9681,9682,9682,9681,9683,9684,9685,9686,9686,9685,9687,9688,9689,9690,9690,9689,9691,9692,9693,9694,9694,9693,9695,9696,9697,9698,9698,9697,9699,9700,9701,9702,9702,9701,9703,9704,9705,9706,9706,9705,9707,9708,9709,9710,9710,9709,9711,9712,9713,9714,9714,9713,9715,9716,9717,9718,9718,9717,9719,9720,9721,9722,9722,9721,9723,9724,9725,9726,9726,9725,9727,9728,9729,9730,9730,9729,9731,9732,9733,9734,9734,9733,9735,9736,9737,9738,9738,9737,9739,9740,9741,9742,9742,9741,9743,9744,9745,9746,9746,9745,9747,9748,9749,9750,9750,9749,9751,9752,9753,9754,9754,9753,9755,9756,9757,9758,9758,9757,9759,9760,9761,9762,9762,9761,9763,9764,9765,9766,9766,9765,9767,9768,9769,9770,9770,9769,9771,9772,9773,9774,9774,9773,9775,9776,9777,9778,9778,9777,9779,9780,9781,9782,9782,9781,9783,9784,9785,9786,9786,9785,9787,9788,9789,9790,9790,9789,9791,9792,9793,9794,9794,9793,9795,9796,9797,9798,9798,9797,9799,9800,9801,9802,9802,9801,9803,9804,9805,9806,9806,9805,9807,9808,9809,9810,9810,9809,9811,9812,9813,9814,9814,9813,9815,9816,9817,9818,9818,9817,9819,9820,9821,9822,9822,9821,9823,9824,9825,9826,9826,9825,9827,9828,9829,9830,9830,9829,9831,9832,9833,9834,9834,9833,9835,9836,9837,9838,9838,9837,9839,9840,9841,9842,9842,9841,9843,9844,9845,9846,9846,9845,9847,9848,9849,9850,9850,9849,9851,9852,9853,9854,9854,9853,9855,9856,9857,9858,9858,9857,9859,9860,9861,9862,9862,9861,9863,9864,9865,9866,9866,9865,9867,9868,9869,9870,9870,9869,9871,9872,9873,9874,9874,9873,9875,9876,9877,9878,9878,9877,9879,9880,9881,9882,9882,9881,9883,9884,9885,9886,9886,9885,9887,9888,9889,9890,9890,9889,9891,9892,9893,9894,9894,9893,9895,9896,9897,9898,9898,9897,9899,9900,9901,9902,9902,9901,9903,9904,9905,9906,9906,9905,9907,9908,9909,9910,9910,9909,9911,9912,9913,9914,9914,9913,9915,9916,9917,9918,9918,9917,9919,9920,9921,9922,9922,9921,9923,9924,9925,9926,9926,9925,9927,9928,9929,9930,9930,9929,9931,9932,9933,9934,9934,9933,9935,9936,9937,9938,9938,9937,9939,9940,9941,9942,9942,9941,9943,9944,9945,9946,9946,9945,9947,9948,9949,9950,9950,9949,9951,9952,9953,9954,9954,9953,9955,9956,9957,9958,9958,9957,9959,9960,9961,9962,9962,9961,9963,9964,9965,9966,9966,9965,9967,9968,9969,9970,9970,9969,9971,9972,9973,9974,9974,9973,9975,9976,9977,9978,9978,9977,9979,9980,9981,9982,9982,9981,9983,9984,9985,9986,9986,9985,9987,9988,9989,9990,9990,9989,9991,9992,9993,9994,9994,9993,9995,9996,9997,9998,9998,9997,9999};

// #define DEBUG_USENEW

#define FILLQUADVERTEX(destQuad,index,pos,color,uv) \
destQuad.v[index].point.x = (pos.x-half_width)/half_width; \
destQuad.v[index].point.y = (half_height-pos.y)/half_height; \
destQuad.v[index].point.z = pos.z; \
destQuad.v[index].colour = color.c; \
destQuad.v[index].u = uv.x;\
destQuad.v[index].v = uv.y

Imageset::Imageset(const GSize& winsize)
:COS_LineDraw(winsize)
,m_vertexBatchBuffer(NULL)
,m_TextureID(NULL)
,m_batchVertices(NULL)
/*,m_batchVerticesBlend(NULL)*/
// ,m_blend(BLEND_DEFAULT)
,m_bdouble(false)
,m_vertexBatchBufferSec(NULL)
,m_batchVerticesSec(NULL)
,m_nQuadFirst(0)
,m_nQuadSecond(0)
,m_bD3DThingsInit(false)
,m_nVetexBufferSize(0)
,m_nVetexBufferSize2(0)
,m_fmt(D3DFMT_A8R8G8B8)
,m_type(Set_Common)
,m_pRenderTex(NULL)
{   
    geometry_count = 0;
    renderStyle = D3DPT_TRIANGLELIST;
    quad_split_mode = TopLeftToBottomRight;
    m_mapImages.clear();
}

void Imageset::releaseD3D(IDirect3DDevice9* d3dDev)
{
	if (m_TextureID)
	{
		m_TextureID->Release();
	}
	if (m_vertexBatchBuffer)
	{
		m_vertexBatchBuffer->Release();
	}
	if (m_vertexBatchBufferSec)
	{
		m_vertexBatchBufferSec->Release();
	}
}

Imageset::~Imageset()
{
	clearMapImage();
	releaseD3D();
#ifdef DEBUG_USENEW
	if (m_batchVertices)
	{
		delete m_batchVertices;
	}
	if (m_batchVerticesSec)
	{
		delete m_batchVertices;
	}
#endif
}

int Imageset::getIntAttr( TiXmlElement * element, const char * attr_name )
{
	int iValue = 0;
	const char * p = element->Attribute( attr_name );
	if ( p ) iValue = atol( p );

	return iValue;
}

std::string Imageset::getStrAttr( TiXmlElement * element, const char * attr_name )
{
	std::string strValue;
	const char * p = element->Attribute( attr_name );
	if ( p ) strValue = p;

	return strValue;
}

bool Imageset::loadXML(const std::string & strFile)
{
	TiXmlDocument doc( strFile.c_str() );
	bool result = doc.LoadFile();
	if ( !result )
	{
		return false;
	}

	std::string strImagesetName, strImagesetFile;
	const char * p			= NULL;
	TiXmlElement * el		= NULL;
	TiXmlElement * elc		= NULL;
	TiXmlElement * imageset_node	= doc.FirstChildElement( "Imageset" );
	if ( imageset_node )
	{
		strImagesetName = getStrAttr( imageset_node, "Name" );
		strImagesetFile = getStrAttr( imageset_node, "Imagefile" );
		if ( strImagesetName.empty() )
		{
			return false;
		}
		
		el = imageset_node->FirstChildElement( "Image" );
		while ( el )
		{
			std::string strImage = getStrAttr( el, "Name" );
			int x = getIntAttr( el, "XPos" );
			int y = getIntAttr( el, "YPos" );
			int w = getIntAttr( el, "Width" );
			int h = getIntAttr( el, "Height" );
			
			CGRect rect = CGRectMake((float)x,(float)y,0.0f,w,h);
			RenderEImage * img=NULL;
			img = new CGLSprite(rect,this);
			img->setHotSpot();
			
			wchar_t unicodeImage[256] = {0};
			MultiByteToWideChar(CP_ACP, 0, strImage.c_str(), -1, unicodeImage, 255);
			std::pair<MAPMUTABLEIMAGE::iterator,bool> pair_re;
			pair_re = m_mapImages.insert( std::pair<std::wstring,RenderEImage*>( unicodeImage, img ) );
			if (!(pair_re.second))
			{
				WLOGH_INFO << L"two images have the same name[" << unicodeImage << L"]";
				SAFE_DELETE(img);
				return false;
			}
			el = el->NextSiblingElement( "Image" );
		}
		return true;
	}
	return false;
}

bool Imageset::loadGif(const std::wstring imgset_name,CxImage* m_xImage)
{
	m_type = Set_Gif;
	m_ImagesetName =  imgset_name;
	int numFrames = m_xImage->GetNumFrames();
	if(numFrames <= 0)
		return false;

	int nqrt = (int)sqrtf((float)numFrames)+1;

	uint tex_width = (m_xImage->GetWidth()+1)*nqrt;
	uint tex_height = (m_xImage->GetHeight()+1)*nqrt;

	if(!createTexture(tex_width,tex_height,D3DFMT_A8R8G8B8,m_TextureID))
		return false;

	m_TextureSize = GSize(tex_width,tex_height);

	int wx = 0;
	int wy = 0;
	int maxH = 0;

	D3DLOCKED_RECT d3dRect;
	m_TextureID->LockRect(0,&d3dRect,NULL,0);
	uint* pARGB = (uint*) d3dRect.pBits;
	uint* pDst = pARGB;

	for (int iFrame=0;iFrame<numFrames;iFrame++)
	{
		CxImage* pImage = m_xImage->GetFrame(iFrame);

		if ((int)pImage->GetHeight() > maxH)
		{
			maxH = pImage->GetHeight()+1;
		}

		if(wx + pImage->GetWidth() > tex_height)
		{
			wx = 0;
			wy += maxH;
		}

		pARGB = pDst + wy*tex_width;

		void* pDib = pImage->GetDIB();
		BITMAPINFOHEADER* bitmaphdr = (BITMAPINFOHEADER*) pDib;
		uint8_t mask = 0x01;//默认是2种颜色bitmaphdr->biClrUsed == 2
		uint8_t bpp = 1;
		bool truecolor = false;
		if (bitmaphdr->biClrUsed == 16)
		{
			mask = 0x0f;
			bpp = 4;
		}
		else if(bitmaphdr->biClrUsed == 256)
		{
			mask = 0xff;
			bpp = 8;
		}
		else if(bitmaphdr->biClrUsed == 0)
		{
			truecolor = true;
		}

		if(!truecolor && bpp == 1)
			return false;

		uint8_t bit = 8-bpp;
		uint8_t* pColor = pImage->GetBits();
		int width = pImage->GetWidth();
		int height = pImage->GetHeight();
		if(truecolor)
		{
			for (int i=0;i<height;i++)
			{
				for (int j=0;j<width;j++)
				{
					pARGB[j+wx] = D3DCOLOR_XRGB(pColor[j*3],pColor[j*3+1],pColor[j*3+2]);
				}
				pColor += pImage->GetEffWidth()*3;
				pARGB += d3dRect.Pitch/4;
			}
		}
		else
		{
			for (int i=0;i<height;i++)
			{
				for (int j=0;j<width;j++)
				{
					uint8_t index = ((pColor[j*bpp/8])>>(bit*(8/bpp-1-j%(8/bpp))))&mask;
					if(index == pImage->GetTransIndex())
					{
						pARGB[j+wx] = D3DCOLOR_ARGB(0,0,0,0);
					}
					else
					{
						RGBQUAD rgbq = pImage->GetPaletteColor(index);
						pARGB[j+wx] = D3DCOLOR_XRGB(rgbq.rgbRed,rgbq.rgbGreen,rgbq.rgbBlue);
					}
				}
				pColor += pImage->GetEffWidth();
				pARGB += d3dRect.Pitch/4;
			}
		}

		CGRect rect = CGRectMake((float)wx,(float)wy,0.0f,pImage->GetWidth(),pImage->GetHeight());
		RenderEImage * img=NULL;
		img = new CGLSprite(rect,this);
		img->setDelay(pImage->GetFrameDelay());

		wchar_t buf[260];
		swprintf_s(buf,L"gif%d",iFrame);
		std::wstring  unicodeImage = buf;
		std::pair<MAPMUTABLEIMAGE::iterator,bool> pair_re;
		pair_re = m_mapImages.insert( std::pair<std::wstring,RenderEImage*>( unicodeImage, img ) );
		if (!(pair_re.second))
		{
			WLOGH_ERRO << L"two images have the same name [" << unicodeImage << L"]";
			SAFE_DELETE(img);
			SAFE_RELEASE(m_TextureID);
			return false;
		}
		m_vectImages.push_back(img);

		wx += pImage->GetWidth();
		wx ++;//间隔一像素
	}
	
	m_TextureID->UnlockRect(0);

	return true;
}

bool Imageset::combinTexture(const std::wstring imgname,const wchar_t* file1,int dest_blend,const wchar_t* file2,int src_blend)
{
	m_type = Set_Common;
	int w1,h1,w2,h2;
	IDirect3DTexture9 *pTexture1=NULL,*pTexture2=NULL;
	if (!loadTexture(file1,w1,h1,pTexture1) || !loadTexture(file2,w2,h2,pTexture2))
	{
		SAFE_RELEASE(pTexture1);
		SAFE_RELEASE(pTexture2);
		WLOGH_ERRO << L"loadTexture1 or loadTexture2 error";
		return false;
	}
	if (w1 != w2 || h1 != h2)
	{
		SAFE_RELEASE(pTexture1);
		SAFE_RELEASE(pTexture2);
		LOGH_ERRO << "singer picture error,need " << w1 <<"*" << h1<<".\n";
		return false;
	}
	RenderEImage* img = new RenderEImage(CGRect(0.0f,0.0f,w1,h1),this);

	MAKETEXTURESIZE(w1,h1);
	m_TextureSize = CGSizeMake(w1,h1);
	std::pair<MAPMUTABLEIMAGE::iterator,bool> pair_re;
	pair_re = m_mapImages.insert(std::pair<std::wstring,RenderEImage*>( imgname, img ));
	if (!(pair_re.second))
	{
		WLOGH_ERRO << L"two combinTextures have the same name,please rename";
		SAFE_RELEASE(pTexture1);
		SAFE_RELEASE(pTexture2);
		SAFE_DELETE(img);
		return false;
	}
	m_fmt = D3DFMT_A8B8G8R8;
	bool bRet =  combinTexture(m_TextureSize,m_fmt,m_TextureID,pTexture1,pTexture2,dest_blend,src_blend);
	
	SAFE_RELEASE(pTexture1);
	SAFE_RELEASE(pTexture2);

	return bRet;
}

bool Imageset::combinTexture(GSize& buffer_size,D3DFORMAT pixel_format,IDirect3DTexture9* &pTexture,IDirect3DTexture9* pTexture1,IDirect3DTexture9* pTexture2,int dest_blend,int src_blend)
{
	if (!pTexture1 || !pTexture2)
	{
		return false;
	}

	D3DFORMAT pixfmt = pixel_format;
	switch (pixel_format)
	{
	case D3DFMT_R8G8B8:
		break;
	case D3DFMT_A8B8G8R8:
		break;
	default:
		//w riteLog("[DXLOG Imageset::combinTexture]: failed: Invalid PixelFormat value specified");
		WLOGH_ERRO << L"Invalid PixelFormat value specified";
		return false;
	}

	//Size tex_sz(d_owner.getAdjustedSize(buffer_size));
	IDirect3DDevice9* d3dDev = cls_gl->m_pDrawListener->m_D3DDev;
	
	HRESULT hr = D3DXCreateTexture(d3dDev,static_cast<UINT>(m_TextureSize.width),static_cast<UINT>(m_TextureSize.height),
		1, 0, pixfmt, D3DPOOL_MANAGED, &pTexture);
	if (FAILED(hr))
	{
		WLOGH_ERRO << L"Direct3D9 texture creation failed";
		return false;
	}

	D3DLOCKED_RECT rect_dest;
	hr = pTexture1->LockRect(0, &rect_dest, 0, 0);
	if (FAILED(hr))
	{
		WLOGH_ERRO << L"IDirect3DTexture9::LockRect rect_dest failed";
		return false;
	}

	D3DLOCKED_RECT rect_src;
	hr = pTexture2->LockRect(0,&rect_src,0,0);
	if (FAILED(hr))
	{
		pTexture1->UnlockRect(0);
		WLOGH_ERRO << L"IDirect3DTexture9::LockRect rect_src failed";
		return false;
	}

	// lock the D3D texture
	D3DLOCKED_RECT rect;
	hr = pTexture->LockRect(0, &rect, 0, 0);
	if (FAILED(hr))
	{
		pTexture2->UnlockRect(0);
		pTexture1->UnlockRect(0);
		WLOGH_ERRO << L"IDirect3DTexture9::LockRect rect failed";
		return false;
	}

	// copy data from buffer into texture
	uint* dst = static_cast<uint*>(rect.pBits);
	const uint* src_dest = static_cast<const uint*>(rect_dest.pBits);
	const uint* src_src = static_cast<const uint*>(rect_src.pBits);
	int k=0;
	// RGBA
	if (pixel_format == D3DFMT_A8B8G8R8)
	{
		switch(dest_blend)
		{
		case GL_TPBLEND_DESTALPHA:
			{
				switch(src_blend)
				{
				case GL_TPBLEND_SRCCOLOUR:
					{
						for (int i = 0; i < buffer_size.height/**2*/; ++i)
						{
							for (int j = 0; j < buffer_size.width; ++j)
							{
								// we dont need endian safety on microsoft
								uint src_final = src_src[j];
								uchar a22 = static_cast<uchar>((src_final >> 24) & 0xFF);
								uchar r2 =	 static_cast<uchar>(((src_final>> 16)& 0xFF) /**a22/255.0f))& 0xFF*/);
								uchar g2 =	 static_cast<uchar>(((src_final >> 8)& 0xFF) /**a22/255.0f))& 0xFF*/);
								uchar b2 =	 static_cast<uchar>(((src_final)& 0xFF ) /**a22/255.0f))& 0xFF*/);
								//uchar a2 = static_cast<uchar>((ulong(a22*a22/255.0f))& 0xFF);

								src_final = src_dest[j];
								uchar a1 = static_cast<uchar>(((src_final >> 24)& 0xFF) /**(255-a22)/255.0f))& 0xFF*/);
								//uchar r1 = static_cast<uchar>((ulong(((src_final>> 16)& 0xFF )*(255-a22)/255.0f))& 0xFF);
								//uchar g1 = static_cast<uchar>((ulong(((src_final >> 8)& 0xFF) *(255-a22)/255.0f))& 0xFF);
								//uchar b1 = static_cast<uchar>((ulong((src_final& 0xFF )  *(255-a22)/255.0f))& 0xFF);

								//uchar r = r1+r2;
								//uchar g = g1+g2;
								//uchar b = b1+b2;
								//uchar a = a1+a2;
								//w riteLog("%d:A:%x,R:%x,G:%x,B:%x",k,a1,r2,g2,b2);
								dst[j] = D3DCOLOR_ARGB(a1, r2, g2, b2);
							}
							//int 
							dst += rect.Pitch / sizeof(uint);
							//dst += 170;
							//uchar * uc = (uchar*)dst;
							//for(int g=0;g<rect.Pitch;g++)
							//w riteLog("%x",*uc);
							src_dest += static_cast<uint>(buffer_size.width);
							src_src += static_cast<uint>(buffer_size.width);
						}
						break;
					}
				}
				break;
			}
		}
	}
	else
	{
		return false;
	}

	pTexture->UnlockRect(0);

	pTexture2->UnlockRect(0);

	pTexture1->UnlockRect(0);

	return true;
}

bool Imageset::loadSingle(const std::wstring& imgset_name,const std::wstring& imgFile)
{
	m_type = Set_Common;
	m_ImagesetName = imgset_name;
	m_TextureSize = loadTextureImage(imgFile.c_str());
	if (m_TextureSize == CGSIZEZERO)
	{
		OutputDebugStringA("m_TextureSize == zero\n");
		return false;
	}

	CGRect rect = CGRectMake(0.0f,0.0f,0.0f,m_TextureSize.width,m_TextureSize.height);
	RenderEImage* img = new CGLSprite(rect,this);
	std::pair<MAPMUTABLEIMAGE::iterator,bool> pair_re;
	pair_re = m_mapImages.insert( std::pair<std::wstring,RenderEImage*>( imgset_name, img ) );
	if (!(pair_re.second))
	{
		WLOGH_ERRO << L"two images have the same name = " << imgset_name.c_str();
		SAFE_DELETE(img);
		return false;
	}

	MAKETEXTURESIZE(m_TextureSize.width,m_TextureSize.height);
	return true;
}

bool Imageset::loadFromDir(const std::wstring imgset_dir,const std::wstring imgset_name)
{
	m_type = Set_Common;
    // 保存Imageset名称
    m_ImagesetName =  imgset_name;
        
	//加载图册
	wchar_t fileName[256] = {0};
	swprintf(fileName,L"%s\\%s.png",imgset_dir.c_str(),imgset_name.c_str());
	//std::string fileName = imgset_name + ".png";
	m_TextureSize = loadTextureImage(fileName);
	if (m_TextureSize == CGSIZEZERO)
		return false;
    
	std::wstring wStr = imgset_dir+L"\\"+imgset_name;
	std::string str;
	Wstr2Str(wStr,str);
    //读取元数据，xml//
	//遍历元数据，为每种纹理构件一个新的四边形。
	char xmlName[256] = {0};
	sprintf(xmlName,"%s.xml",str.c_str());
	if (!loadXML(xmlName))
	{
		return false;
	}
	return true;
}

inline void ExchangeRedBlue(void* buffer,int w,int h)
{
	void* b = buffer;	// Pointer To The Buffer
	int s = h*w;
	__asm// Assembler Code To Follow
	{
		mov ecx, s// Counter Set To Dimensions Of Our Memory Block
		mov ebx, b// Points ebx To Our Data (b)
		label:// Label Used For Looping
			mov al,[ebx+0]// Loads Value At ebx Into al
			mov ah,[ebx+2]// Loads Value At ebx+2 Into ah
			mov [ebx+2],al// Stores Value In al At ebx+2
			mov [ebx+0],ah// Stores Value In ah At ebx

			add ebx,3// Moves Through The Data By 3 Bytes
			dec ecx// Decreases Our Loop Counter
			jnz label// If Not Zero Jump Back To Label
	}
}

bool Imageset::updateTexture(const byte* pBuf,int w,int h,bool isRgb)
{
	if (m_TextureID)
	{
 		HRESULT hr;

		int nSize = w*h*3;
		void* pData = new char[w*h*3];
		if(!pData)
			return false;
		memcpy(pData,pBuf,nSize);
		if(!isRgb)
			ExchangeRedBlue(pData,w,h);
		IDirect3DSurface9* pSurface;
		hr = m_TextureID->GetSurfaceLevel(0,&pSurface);
		if (FAILED(hr))
		{
			if(pData)
				delete pData;
			WLOGH_ERRO << L"IDirect3DTexture9::GetSurfaceLevel GetSurfaceLevel failed";
			return false;
		}

		RECT  source_rect;
		source_rect.left    = 0;
		source_rect.top     = 0;
		source_rect.right   = w;
		source_rect.bottom  = h;
		int srcPitch = 3*w;//自定义的视频应该都是对其到视频宽度的
		hr = D3DXLoadSurfaceFromMemory(pSurface,NULL,&source_rect,pData,m_fmt,srcPitch,NULL,&source_rect,D3DX_DEFAULT, 0);
		if(FAILED(hr))
		{
			if(pData)
				delete pData;
			pSurface->Release();
			WLOGH_ERRO << L"D3DXLoadSurfaceFromMemory failed";
			return false;
		}
		pSurface->Release();

		if(pData)
			delete pData;
		return true;
	}

	return false;
}

RenderEImage* Imageset::getImage(uint& n)
{
	if(m_vectImages.empty())
		return NULL;
	if (n >= m_vectImages.size())
	{
		n = 0;
	}
	return m_vectImages[n++];
}

RenderEImage* Imageset::getImage(const std::string& img_name)
{
	wchar_t ws[256] = {0};
	MultiByteToWideChar(CP_ACP,0,img_name.c_str(),-1,ws,255);
	std::wstring wstring = ws;
	return getImage(wstring);
}

RenderEImage* Imageset::getImage(const std::wstring& img_name)
{
	MAPMUTABLEIMAGE::const_iterator i;
	if (m_mapImages.empty())
		return NULL;

	i = m_mapImages.find(img_name);
	if ( i != m_mapImages.end() )
	{
		return i->second;
	}
	return NULL;
}

bool Imageset::isDefined(const std::string& img_name)
{
	wchar_t ws[256] = {0};
	MultiByteToWideChar(CP_ACP,0,img_name.c_str(),-1,ws,255);
	std::wstring wstring = ws;
	return isDefined(wstring);
}

bool Imageset::isDefined(const std::wstring& img_name)
{
	MAPMUTABLEIMAGE::const_iterator i;
	i = m_mapImages.find(img_name);
	if ( i != m_mapImages.end() )
	{
		return true;
	}
	return false;
}

bool Imageset::addImage( const std::string & img_name, const CGRect & img_rect , const GPoint & img_offset)
{
	wchar_t ws[256] = {0};
	MultiByteToWideChar(CP_ACP,0,img_name.c_str(),-1,ws,255);
	std::wstring wstring = ws;
	return addImage(wstring,img_rect,img_offset);
}

bool Imageset::addImage( const std::wstring & img_name, const CGRect & img_rect , const GPoint & img_offset)
{
	RenderEImage * img = new RenderEImage(img_rect,this);
   	// find the normalized texture coordinates计算归一化的纹理坐标
    img->setPoint(img_offset);
	std::pair<MAPMUTABLEIMAGE::iterator,bool> pair_re;
	pair_re = m_mapImages.insert(std::pair<std::wstring,RenderEImage*>( img_name, img ));
	if (!(pair_re.second))
	{
		SAFE_DELETE(img);
	}

	return pair_re.second;
}

void Imageset::setTexture(IDirect3DTexture9* &texid ,GSize& tex_size)
{
    m_TextureID = texid;
    m_TextureSize = tex_size;
}

bool Imageset::render(const CUSTOMVERTEX& v1,const CUSTOMVERTEX& v2,const CUSTOMVERTEX& v3
					  ,const CUSTOMVERTEX& v4,int blend)
{
	static float half_width = m_windowsize.width / 2.0f;
	static float half_height = m_windowsize.height / 2.0f;

	reQuad quad;
	 quad.v[0].point.x = (v1.point.x - half_width)/half_width;
	 quad.v[0].point.y = (half_height - v1.point.y)/half_height;
	 quad.v[0].point.z = v1.point.z;
	 quad.v[0].colour = v1.colour;
	 quad.v[0].u = v1.u;
	 quad.v[0].v = v1.v;

	 quad.v[1].point.x = (v2.point.x - half_width)/half_width;
	 quad.v[1].point.y = (half_height - v2.point.y)/half_height;
	 quad.v[1].point.z = v2.point.z;
	 quad.v[1].colour = v2.colour;
	 quad.v[1].u = v2.u;
	 quad.v[1].v = v2.v;

	 quad.v[2].point.x = (v3.point.x - half_width)/half_width;
	 quad.v[2].point.y = (half_height - v3.point.y)/half_height;
	 quad.v[2].point.z = v3.point.z;
	 quad.v[2].colour = v3.colour;
	 quad.v[2].u = v3.u;
	 quad.v[2].v = v3.v;

	 quad.v[3].point.x = (v4.point.x - half_width)/half_width;
	 quad.v[3].point.y = (half_height - v4.point.y)/half_height;
	 quad.v[3].point.z = v4.point.z;
	 quad.v[3].colour = v4.colour;
	 quad.v[3].u = v4.u;
	 quad.v[3].v = v4.v;

	 quad.blend = blend;
	 quad.tex = (void*)m_TextureID;

	 if(cls_gl->m_pDrawListener)
		 cls_gl->m_pDrawListener->renderQuad(&quad);

	 return true;
}

// grabs the openGL texture ID from the library and calls the openGL bind texture method
void Imageset::render(const CGRect& source_rect ,const CGRect& dest_rect ,bool bdest_pclip,CGRect* pclip_rect ,const GColorRect& color_rect,bool bXFlip,bool bYFilp,int blend)
{
    CGRect final_dest_rect = dest_rect;
	CGRect final_source_rect = source_rect;
    
    if ( pclip_rect != NULL )
    {
		if (bdest_pclip)
		{
			final_dest_rect = CGRectIntersection( dest_rect, *pclip_rect );
		}
		else
		{
			pclip_rect->origin += source_rect.origin;
			final_source_rect = CGRectIntersection(source_rect,*pclip_rect);
		}
    }
    
    if ( final_dest_rect.size.width == 0 || final_dest_rect.size.height == 0 )
    {
        return;
    }
    
	CGFloat l;
	CGFloat t;
	CGFloat r;
	CGFloat b;
	if (bdest_pclip)
	{
		float tex_per_pix_x = 1.0f*final_source_rect.size.width / dest_rect.size.width;
		float tex_per_pix_y = 1.0f*final_source_rect.size.height / dest_rect.size.height;
		//final在dest的右边，下边
		l = (final_source_rect.origin.x + ((final_dest_rect.origin.x - dest_rect.origin.x) * tex_per_pix_x));
		t = (final_source_rect.origin.y + ((final_dest_rect.origin.y - dest_rect.origin.y) * tex_per_pix_y));
		r = (final_source_rect.origin.x + final_source_rect.size.width + ((final_dest_rect.origin.x + final_dest_rect.size.width - dest_rect.origin.x - dest_rect.size.width ) * tex_per_pix_x));
		b = (final_source_rect.origin.y + final_source_rect.size.height + ((final_dest_rect.origin.y + final_dest_rect.size.height - dest_rect.origin.y - dest_rect.size.height) * tex_per_pix_y));
	}
	else
	{
		l = final_source_rect.origin.x;
		t = final_source_rect.origin.y;
		r = final_source_rect.origin.x+final_source_rect.size.width;
		b = final_source_rect.origin.y+final_source_rect.size.height;
	}
    
    float uMin = l / m_TextureSize.width;
    float vMin = t / m_TextureSize.height;
    float uMax = r / m_TextureSize.width;
    float vMax = b / m_TextureSize.height;
    
    GPoint pos_left_top = CGPointMake(final_dest_rect.origin.x, final_dest_rect.origin.y,final_dest_rect.origin.z);
    GPoint pos_left_bottom = CGPointMake(final_dest_rect.origin.x, final_dest_rect.origin.y + final_dest_rect.size.height,final_dest_rect.origin.z);
    GPoint pos_right_top = CGPointMake(final_dest_rect.origin.x + final_dest_rect.size.width, final_dest_rect.origin.y,final_dest_rect.origin.z);
    GPoint pos_right_bottom = CGPointMake(final_dest_rect.origin.x + final_dest_rect.size.width, final_dest_rect.origin.y + final_dest_rect.size.height,final_dest_rect.origin.z);
    
    GPoint tex_left_b = CGPointMake(uMin,vMin);
    GPoint tex_left_t = CGPointMake(uMin,vMax);
    GPoint tex_right_b = CGPointMake(uMax,vMin);
    GPoint tex_right_t = CGPointMake(uMax,vMax);
    
	if (bXFlip)
	{
		SWAPPOINT(tex_left_b,tex_right_b);
		SWAPPOINT(tex_left_t,tex_right_t);
	}
	if (bYFilp)
	{
		SWAPPOINT(tex_left_b,tex_left_t);
		SWAPPOINT(tex_right_b,tex_right_t);
	}

	static float half_width = m_windowsize.width / 2.0f;
	static float half_height = m_windowsize.height / 2.0f;
	reQuad quad;
	FILLQUADVERTEX(quad,0,pos_left_top,color_rect.left_top_color,tex_left_b);
 	FILLQUADVERTEX(quad,1,pos_left_bottom,color_rect.left_bottom_color,tex_left_t);
 	FILLQUADVERTEX(quad,2,pos_right_top,color_rect.right_top_color,tex_right_b);
 	FILLQUADVERTEX(quad,3,pos_right_bottom,color_rect.right_bottom_color,tex_right_t);
	quad.blend = blend;
	quad.tex = (void*)m_TextureID;

	assert(cls_gl->m_pDrawListener != NULL);
	if(cls_gl->m_pDrawListener)
		cls_gl->m_pDrawListener->renderQuad(&quad);
}

void Imageset::render(const GPoint& v1,const GPoint& v2,const GPoint& v3,const GPoint& v4,const CGRect& source_rect,const GColorRect& color_rect,bool bXFlip,bool bYFilp,int blend)
{
	CGFloat l = source_rect.origin.x;
	CGFloat t = source_rect.origin.y;
	CGFloat r = source_rect.origin.x + source_rect.size.width ;
	CGFloat b= source_rect.origin.y + source_rect.size.height;

	float uMin = l / m_TextureSize.width;
	float vMin = t / m_TextureSize.height;
	float uMax = r / m_TextureSize.width;
	float vMax = b / m_TextureSize.height;

	GPoint tex_left_b = CGPointMake(uMin,vMin);
	GPoint tex_left_t = CGPointMake(uMin,vMax);
	GPoint tex_right_b = CGPointMake(uMax,vMin);
	GPoint tex_right_t = CGPointMake(uMax,vMax);

	GPoint pos_left_top = CGPointMake(v1.x, v1.y,v1.z);
	GPoint pos_right_top = CGPointMake(v2.x, v2.y,v2.z);
	GPoint pos_right_bottom = CGPointMake(v3.x, v3.y,v3.z);
	GPoint pos_left_bottom = CGPointMake(v4.x, v4.y,v4.z);

	if (bXFlip)
	{
		SWAPPOINT(tex_left_b,tex_right_b);
		SWAPPOINT(tex_left_t,tex_right_t);
	}
	if (bYFilp)
	{
		SWAPPOINT(tex_left_b,tex_left_t);
		SWAPPOINT(tex_right_b,tex_right_t);
	}

	static float half_width = m_windowsize.width / 2.0f;
	static float half_height = m_windowsize.height / 2.0f;
	reQuad quad;
 	FILLQUADVERTEX(quad,0,pos_left_top,color_rect.left_top_color,tex_left_b);
 	FILLQUADVERTEX(quad,1,pos_left_bottom,color_rect.left_bottom_color,tex_left_t);
 	FILLQUADVERTEX(quad,2,pos_right_top,color_rect.right_top_color,tex_right_b);
 	FILLQUADVERTEX(quad,3,pos_right_bottom,color_rect.right_bottom_color,tex_right_t);
	quad.blend = blend;
	quad.tex = (void*)m_TextureID;

	assert(cls_gl->m_pDrawListener != NULL);
	if(cls_gl->m_pDrawListener)
		cls_gl->m_pDrawListener->renderQuad(&quad);
}

void Imageset::render(const GPoint& hot_point,const GPoint& dest_point,const CGRect& source_rect,float rot,float hscale, float vscale,const GColorRect& color_rect,int blend)
{
	CGFloat l = source_rect.origin.x;
	CGFloat t = source_rect.origin.y;
	CGFloat r = source_rect.origin.x + source_rect.size.width ;
	CGFloat b= source_rect.origin.y + source_rect.size.height;

	float uMin = l / m_TextureSize.width;
	float vMin = t / m_TextureSize.height;
	float uMax = r / m_TextureSize.width;
	float vMax = b / m_TextureSize.height;

	GPoint tex_left_b = CGPointMake(uMin,vMin);
	GPoint tex_left_t = CGPointMake(uMin,vMax);
	GPoint tex_right_b = CGPointMake(uMax,vMin);
	GPoint tex_right_t = CGPointMake(uMax,vMax);

	float tx1, ty1, tx2, ty2;
	float sint, cost;

	if(vscale==0) vscale=hscale;

	tx1 = -hot_point.x*hscale;
	ty1 = -hot_point.y*vscale;
	tx2 = (source_rect.size.width-hot_point.x)*hscale;
	ty2 = (source_rect.size.height-hot_point.y)*vscale;

	GPoint pos_left_top;
	GPoint pos_left_bottom;
	GPoint pos_right_top;
	GPoint pos_right_bottom;
	if (rot != 0.0f)
	{
		cost = cosf(rot);
		sint = sinf(rot);
		//平面旋转，绕中心点旋转（hot_point），
		pos_left_top  = CGPointMake(tx1*cost - ty1*sint + dest_point.x,tx1*sint + ty1*cost + dest_point.y,dest_point.z);

		pos_right_top  = CGPointMake(tx2*cost - ty1*sint + dest_point.x,tx2*sint + ty1*cost + dest_point.y,dest_point.z);

		pos_right_bottom  = CGPointMake(tx2*cost - ty2*sint + dest_point.x,tx2*sint + ty2*cost + dest_point.y,dest_point.z);

		pos_left_bottom  = CGPointMake(tx1*cost - ty2*sint + dest_point.x,tx1*sint + ty2*cost + dest_point.y,dest_point.z);
	}
	else
	{
		pos_left_top = CGPointMake(tx1 + dest_point.x,ty1 + dest_point.y,dest_point.z);
		pos_right_top = CGPointMake(tx2 + dest_point.x,ty1 + dest_point.y,dest_point.z);
		pos_right_bottom = CGPointMake(tx2 + dest_point.x,ty2 + dest_point.y,dest_point.z);
		pos_left_bottom = CGPointMake(tx1 + dest_point.x,ty2 + dest_point.y,dest_point.z);
	}

	static float half_width = m_windowsize.width / 2.0f;
	static float half_height = m_windowsize.height / 2.0f;
	reQuad quad;
	FILLQUADVERTEX(quad,0,pos_left_top,color_rect.left_top_color,tex_left_b);
	FILLQUADVERTEX(quad,1,pos_left_bottom,color_rect.left_bottom_color,tex_left_t);
	FILLQUADVERTEX(quad,2,pos_right_top,color_rect.right_top_color,tex_right_b);
	FILLQUADVERTEX(quad,3,pos_right_bottom,color_rect.right_bottom_color,tex_right_t);
	quad.blend = blend;
	quad.tex = (void*)m_TextureID;

	assert(cls_gl->m_pDrawListener != NULL);
	if(cls_gl->m_pDrawListener)
		cls_gl->m_pDrawListener->renderQuad(&quad);
}

void resizeBuffer(float** buffer ,int old_size ,int new_size)
{
    float * temp = (float *)(malloc( new_size ));
    if ( *buffer )
    {
        memcpy(temp, *buffer, old_size );
        free( *buffer );
        *buffer = temp;
    }
    else
    {
        *buffer = temp;
    }    
}

// does the heavy lifting for getting a named image into a texture
// that is loaded into openGL
// this is a modified version of the way Apple loads textures in their sample code
void Imageset::freeImage(_tImageInfo *_image)
{
	if (!_image)
		return;
	if (_image->hBitmap) {
		::DeleteObject(_image->hBitmap) ; 
	}
	delete _image ;
};

_tImageInfo* Imageset::loadImage(const char *pngFile, bool onlyout, DWORD mask)
{
	LPBYTE pData = NULL;
	DWORD dwSize = 0;

	HANDLE hFile = ::CreateFile(pngFile, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, \
		FILE_ATTRIBUTE_NORMAL, NULL);
	if( hFile == INVALID_HANDLE_VALUE ) return NULL;
	dwSize = ::GetFileSize(hFile, NULL);
	if( dwSize == 0 ) return NULL;

	DWORD dwRead = 0;
	pData = new BYTE[ dwSize ];
	::ReadFile( hFile, pData, dwSize, &dwRead, NULL );
	::CloseHandle( hFile );

	if( dwRead != dwSize ) {
		delete[] pData;
		return NULL;
	}

	LPBYTE pImage = NULL;
	int x,y,n;
	pImage = stbi_load_from_memory(pData, dwSize, &x, &y, &n, 4);
	delete[] pData;
	if( !pImage ) return NULL;

	BITMAPINFO bmi;
	::ZeroMemory(&bmi, sizeof(BITMAPINFO));
	bmi.bmiHeader.biSize = sizeof(BITMAPINFOHEADER);
	bmi.bmiHeader.biWidth = x;
	bmi.bmiHeader.biHeight = -y;
	bmi.bmiHeader.biPlanes = 1;
	bmi.bmiHeader.biBitCount = 32;
	bmi.bmiHeader.biCompression = BI_RGB;
	bmi.bmiHeader.biSizeImage = x * y * 4;

	bool bAlphaChannel = false;
	LPBYTE pDest = NULL;
	HBITMAP hBitmap = ::CreateDIBSection(NULL, &bmi, DIB_RGB_COLORS, (void**)&pDest, NULL, 0);
	if( !hBitmap ) return NULL;

	LPBYTE _dest = pDest;
	if (!onlyout) {
		for( int i = 0; i < x * y; i++ ) 
		{
			pDest[i*4 + 3] = pImage[i*4 + 3];
			if( pDest[i*4 + 3] < 255 )
			{
				pDest[i*4] = (BYTE)(DWORD(pImage[i*4 + 2])*pImage[i*4 + 3]/255);
				pDest[i*4 + 1] = (BYTE)(DWORD(pImage[i*4 + 1])*pImage[i*4 + 3]/255);
				pDest[i*4 + 2] = (BYTE)(DWORD(pImage[i*4])*pImage[i*4 + 3]/255); 
				bAlphaChannel = true;
			}
			else
			{
				pDest[i*4] = pImage[i*4 + 2];
				pDest[i*4 + 1] = pImage[i*4 + 1];
				pDest[i*4 + 2] = pImage[i*4]; 
			}

			if( *(DWORD*)(&pDest[i*4]) == mask ) {
				pDest[i*4] = (BYTE)0;
				pDest[i*4 + 1] = (BYTE)0;
				pDest[i*4 + 2] = (BYTE)0; 
				pDest[i*4 + 3] = (BYTE)0;
				bAlphaChannel = true;
			}
		}
	} else {
		_dest = new BYTE[x*y*4];
		memcpy(_dest, pImage, x*y*4*sizeof(BYTE));
		for( int i = 0; i < x * y; i++ ) 
		{
			BYTE _tmp[3] = {_dest[i*4],_dest[i*4+1],_dest[i*4+2]};
			_dest[i*4] = _tmp[2];
			_dest[i*4+1] = _tmp[1];
			_dest[i*4+2] = _tmp[0];
		}
	}

	stbi_image_free(pImage);

	_tImageInfo* data = new _tImageInfo;
	data->hBitmap = hBitmap;
	data->nX = x;
	data->nY = y;
	data->alphaChannel = bAlphaChannel;
	data->bitmapData = _dest;
	return data;
};

// BOOL Imageset::LoadGLTextures(BYTE* pglTextureData,int w,int h)
// {
// 	BOOL Status=FALSE;									// Status Indicator
// 	if ( !pglTextureData )
// 	{
// 		return Status;
// 	}
// 	//Video2TextureMem(m_pvideoData,m_pvideoTextureData);
// 	Status=TRUE;									// Set The Status To TRUE
// 	glGenTextures(1, &mTextureID);					// 创建1个纹理id
// 
// 	// Typical Texture Generation Using Data From The Bitmap
// 	glBindTexture(GL_TEXTURE_2D, mTextureID);
// //	glTexImage2D(GL_TEXTURE_2D, 0, 3, m_textureX, m_textureY, 0, GL_RGB, GL_UNSIGNED_BYTE, m_pvideoTextureData);
// 	glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, w, h, 0, GL_BGRA, GL_UNSIGNED_BYTE, pglTextureData);
// 
// 
// 	glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_LINEAR);
// 	glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_LINEAR);
// 	
// 	return Status;										// Return The Status
// }


GSize	Imageset::loadTextureImage(const wchar_t* imgfile_name)//,const std::string imgset_name)
{
 	int width;// = pBitMapData->nX;
 	int height;// = pBitMapData->nY;
	
 	GSize imageSize;// = CGSizeMake(width, height);
// 	
// 	if (pBitMapData->bitmapData)
//	{
	loadTexture(imgfile_name,width,height);
	
	imageSize = CGSizeMake(width,height);
	
	return imageSize;
}

bool Imageset::loadTexture(const wchar_t* fileName,int &w,int &h,IDirect3DTexture9*&ptexture)
{
	//IDirect3DTexture9 *d3dTexture;
	D3DXIMAGE_INFO SrcInfo;			//文件信息，宽高等
	ZeroMemory(&SrcInfo,sizeof(SrcInfo));
	//Use a magenta colourkey
	D3DCOLOR colorkey = 0x00000000;//0xFFFFFFFF;
	m_fmt = D3DFMT_A8R8G8B8;
	// Load image from file
	IDirect3DDevice9* d3dDev = cls_gl->m_pDrawListener->m_D3DDev;
	//count 3
	if (FAILED(D3DXCreateTextureFromFileExW (d3dDev, fileName, 0, 0, 1, 0, m_fmt, D3DPOOL_MANAGED
		, D3DX_FILTER_NONE, D3DX_DEFAULT
		, colorkey, &SrcInfo, NULL, &ptexture)))
	{
		w = 0;
		h = 0;
		return false;
	}
	//count 4
	w = SrcInfo.Width;
	h = SrcInfo.Height;
	//Return the newly made texture
	return true;
}

IDirect3DTexture9 *Imageset::createTexture(uint& w,uint& h,D3DFORMAT fmt,IDirect3DTexture9* &pTex)
{
	IDirect3DDevice9* d3dDev = cls_gl->m_pDrawListener->m_D3DDev;
	
	MAKETEXTURESIZE(w,h);
	m_fmt = fmt;
	HRESULT hr = D3DXCreateTexture(d3dDev,w,h,1, 0, fmt, D3DPOOL_MANAGED, &pTex);

	if (FAILED(hr))
	{
		w = 0;
		h = 0;
	}
	//Return the newly made texture
	return pTex;
}
//Load a texture
//Supported formats: BMP, PPM, DDS, JPG, PNG, TGA, DIB
IDirect3DTexture9 *Imageset::loadTexture(const wchar_t *fileName,int &w,int &h)
{
	//IDirect3DTexture9 *d3dTexture;
	D3DXIMAGE_INFO SrcInfo;			//文件信息，宽高等
	ZeroMemory(&SrcInfo,sizeof(SrcInfo));
	//Use a magenta colourkey
	D3DCOLOR colorkey = 0x00000000;//0xFFFFFFFF;
	m_fmt = D3DFMT_A8R8G8B8;
	// Load image from file
	if(!cls_gl->m_pDrawListener)
		return NULL;
	IDirect3DDevice9* d3dDev = cls_gl->m_pDrawListener->m_D3DDev;
	//count 3
	if (FAILED(D3DXCreateTextureFromFileExW (d3dDev, fileName, 0, 0, 1, 0, m_fmt, D3DPOOL_MANAGED
												, D3DX_FILTER_NONE, D3DX_DEFAULT
												, colorkey, &SrcInfo, NULL, &m_TextureID)))
	{
		w = 0;
		h = 0;
		return NULL;
	}
	//count 4
	w = SrcInfo.Width;
	h = SrcInfo.Height;
	//Return the newly made texture
	return m_TextureID;
}

void Imageset::clearMapImage()
{
	if (!m_mapImages.empty())
	{
		MAPMUTABLEIMAGE::iterator i;
		for (i = m_mapImages.begin();i!=m_mapImages.end();i++)
		{
			
			RenderEImage *  &img = i->second;
			//i++;
			SAFE_DELETE(img);
		}
	}
	m_mapImages.clear();
}




